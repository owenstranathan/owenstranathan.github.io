<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Owen Stranathan</title><link>https://owenstranathan.com/feed</link><description>Blog for my thoughts, observations, opinions, project, curiosities and anything and everything in between</description><atom:link href="https://owenstranathan.com/feed" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Wed, 02 Mar 2022 22:25:26 +0000</lastBuildDate><item><title>Perception and Work</title><link>https://owenstranathan.com/2022/01/12/perception-and-work.html</link><description>&lt;p&gt;It's been a while since I last made a post and I'm not really sure where to begin.
I'd like to start writing regularly again and while I do write a little blurb in my analog journal every morning,
I want to do more long form blog posts as an outlet for some of my philosophical thoughts and energies that don't get
expressed in my regular work. It's pretty dang early right now so my thoughts are a little less than totally coherent but I'll
give this a go any how.&lt;/p&gt;
&lt;p&gt;This morning I'm thinking about time, I think about time a lot these days. This is in large part because it seems to pass me by at
lighting speed. The hours melt into day which melt into weeks and months and years. I can't believe it's been 3 months since I left Disbelief.
I've gotten an amazing amount done in this 3 months but it doesn't ever quite feel like enough.&lt;/p&gt;
&lt;p&gt;That's the big kicker, "what it feels like". Perception is everything in life. When I was a kid I turned my nose up at liver because I &lt;strong&gt;perceived&lt;/strong&gt; it as being
unpalatable, but as an adult beef and chicken liver is one my favorite foods. When I was a teenager and young adult working as a line cook fine restaurants
I envied programmers and professional gamers because I &lt;strong&gt;perceived&lt;/strong&gt; that they had a relaxing and &lt;em&gt;easy&lt;/em&gt; job. My job cooking at the time was very demanding and
I was on the road to burn out (a concept I didn't yet understand).
When I first started out in programming I felt insecure and doubted my self endlessly because I &lt;strong&gt;perceived&lt;/strong&gt; that my code was of poor quality and too slowly composed.&lt;/p&gt;
&lt;p&gt;All of these perceptions were only partially correct but failed to wholistically understand the picture of my situation at the time.&lt;/p&gt;
&lt;p&gt;Liver is indeed &lt;em&gt;unpalatable&lt;/em&gt; when you compare it to the hyper palatable foods I was accustomed to as a child (chicken nuggets, potato chips, french fries, ice cream).
But when you really feel hunger and your body &lt;strong&gt;genuinely&lt;/strong&gt; need nutrients, say after a long fast or when you enter ketosis or if you just get off sugar for a while, then
foods like liver and veggies and fermented dairy and other food perceived as being &lt;em&gt;unpalatable&lt;/em&gt; actually start to taste good.&lt;/p&gt;
&lt;p&gt;Programming is certainly a "relaxing" and "easy" job when you only compare it to running around a hot kitchen for 12 hours at a time without eating and to consider the mental energy
required as well as the more considerable opportunity cost to sitting in a chair staring at a computer monitor all day every day (specifically the health costs).&lt;/p&gt;
&lt;p&gt;My code as a new programmer was certainly low quality and slowly written if you were to only to compare it to my code now, 6 years in, or the code of my boss at the time. But if
you think about the purpose of my code at that time, which was generally written for lower priority, low stakes projects and tasks then the quality and speed was likely exactly
appropriate.&lt;/p&gt;
&lt;p&gt;My perception, and more broadly &lt;em&gt;people's&lt;/em&gt; perception in general, is always incomplete and semi-unreliable. You're eyes see everything in front of you but not behind. Your ears hear all
around you but only so far. Of everything you see only a small part is perceived by your concious mind. Of everything you hear the majority is filtered out to save your mind from madness.
Of all that your concious mind perceives your thought can only wrap themselves around and carry part of it. Humans can focus well on one or 2 things and cast predictions just so far into
the future, and then our limited minds begin to show there limits. We must accept that we are flawed and have &lt;em&gt;faith&lt;/em&gt; that we can carry on through our limitations.&lt;/p&gt;
&lt;p&gt;Before I get to lofty and platonic let me tie this back to my life and the &lt;strong&gt;real world&lt;/strong&gt;.
Since leaving Disbelief and my most recent job as a programmer in October of last year (2021) I've been working hard every day building my homestead here in Vermont.
I particular I've been working on 3 things simultaneously.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I've been building a 25' Yurt from scratch for my wife and I to live in.&lt;/li&gt;
&lt;li&gt;I've been working our 11 acre piece of land to ready it for the yurt and to generally make it livable (i.e. Infrastructure like a drive way, a well, electricity, etc.)&lt;/li&gt;
&lt;li&gt;I've been designing and building a sauna building on the land for us to use as a sauna, shower house and storage/guest building.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I think about these projects I get a little freaked out because I see how much more there is to do and feel discouraged by my apparent lack of progress.
I struggle to perceive my real situation, that of on man working on a 3 projects large enough for a dozen and limited by time, money, weather and skill (which increases slowly each day).
My desire to move onto my land come spring adds to my anxiety and further distorts my perception by adding a looming sense of urgency to complete all these
projects in the next 4 months before the ground thaws and I get a new set of projects to complete (yurt platform, garden, workshop building, electrical trenching, well drilling, etc, etc.)&lt;/p&gt;
&lt;p&gt;Add on top of that the emotional and psychological anxiety and perception warping influence of not having the security of a full time job and living with your parents and you quickly
end up in self-doubtville.
When tackling any project it's important to have faith in your ability to get it done, and to set your mind to the work irrespective of the time line. It's easy to get discouraged by
slow progress and quit altogether. But if realize that if you just keep working, keep grinding, keep hammering you'll get there, you'll achieve &lt;em&gt;something&lt;/em&gt; then you can have faith in 
yourself and the process to complete your projects and live your life fully. &lt;/p&gt;
&lt;p&gt;Boiling it down a cliches and a platitudes: "Never give up" or "Just don't quit" are good candidates.
But understanding the problems of perception that prevent you from heeding those wise saying can be helpful to keep working and stop worrying.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I'm running out of time this AM and don't want to get too carried away with this post. I've not proof read this fully and know for sure I've made some spelling and grammar mistakes.
However excessive editing can cause a writer to never publish and since this is just a post on my mostly meaningless personal blog even one proof read might be over kill.
Please excuse my many errors&lt;/em&gt;&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Dedicate to being dedicated</title><link>https://owenstranathan.com/2020/08/29/dedication.html</link><description>&lt;p&gt;Work is hard. It's just a fact of life, and we all come to realize it eventually.
Beyond the challenge of work itself, there is a meta challenge of going to work.
Getting yourself together and going willingly to do something that you &lt;strong&gt;know&lt;/strong&gt; will
be difficult and mostly unpleasant is a challenge in and of itself.
The moment we consider how difficult the task of our work will be there is a moment of
friction that can paralyze us. This is the first challenge of work, overcoming the inertia of rest
to begin the output of energy in pursuit of some ends.&lt;/p&gt;
&lt;p&gt;How can we overcome this inertia, this potent force that holds us back from our ambitions and our responsibilities?
I'm sure you can name a few methods of motivation, and no doubt you use all of them from time to time in your own life.&lt;/p&gt;
&lt;p&gt;Most methods we easily think of depend on gratification or the promise thereof.
When for example we wake from our rest, beginning our day in peace, then come to the point where we must rouse ourselves
to go to work, be it at an office, a construction site, a restaurant, a factory, a school, or even in our home for our families,
the cessation of rest is a difficult thing to perform. We think to ourselves, "the pay day will be nice", or "this weekend I'll
go out for some fun and enjoy myself as a treat", or "my family needs support and I can't let them down", or some other formulation of the
same thought. Namely we think "If I do X now, even though I &lt;strong&gt;don't&lt;/strong&gt; want to, I'll get Y later which I &lt;strong&gt;do&lt;/strong&gt; want".
This is pretty motivating, and I think you could live your entire life using just this method of motivation to overcome the inertia of rest.&lt;/p&gt;
&lt;p&gt;Sometimes the trade isn't so obvious or forthcoming. Sometimes we do X in exchange for Y to trade it for Z to use it in the process of doing A so that we might attain B all over the span of years.
Bearing in mind that the variables of the sentence need not be tangible items, one can see that the idea of work, its products, and motivations can become very complex
and hard to conceptualize. The very reason we work often requires separate work to maintain. Our own motivation needs input to be sustained and as such often wains,
as does the quality of our workmanship, and we start to slip, working with less vigor and more contempt. The contempt bleeds into our very being and we begin
to live every facet of our lives with the same lack of drive and the same uncertainty of reason. This is not the good life. Just as muscle atrophy, obesity,
cancer, and addiction, this should be avoided.&lt;/p&gt;
&lt;p&gt;How do we overcome the collapsing of motivation?&lt;/p&gt;
&lt;p&gt;Call it having faith. Call it being driven.&lt;/p&gt;
&lt;p&gt;I call it dedication. Not just to your work, to your family, or to your goals but to yourself, to the idea.&lt;/p&gt;
&lt;p&gt;Suppose you've started to slip, the trade has become too complex and you no longer see how waking up at 5am to sneak in
a run, just to hurry home, shower, eat a boring but healthy breakfast and then run along to your job relates, advances or provides
for your goals, your desires, or your happiness. In this moment you need to stop thinking on the trade, stop focusing on the echo and focus on
the shout. You're not working to make the money or to be famous or to have a bigger house to die in, you're working because you're dedicated, you're a professional.&lt;/p&gt;
&lt;p&gt;Focus on the shout.&lt;br /&gt;
Without expectation, without disappointment.&lt;br /&gt;
Be a pro.&lt;br /&gt;
Be dedicated.&lt;br /&gt;
Be dedicated to being dedicated.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Constraints</title><link>https://owenstranathan.com/2022/01/13/constraints.html</link><description>&lt;p&gt;This morning I wrote an email to a friend in response to some images he shared with me of an old computer he's restoring.&lt;br /&gt;
I'm not talking about a 2000 Hewlett-Packard, I mean a really old computer, the kind where the name is like a CIA code name of letters and numbers and just saying it
makes you feel a little bit dorkier.
I think it's really cool that he restores old computers. I like to "restore" old hand tools, and
think that if you can breath new life into old equipment then you're doing a really beautiful thing (I'm less inclined toward "museum" type restoration, if
an item has out lived it's value then allowing it to die is not a bad thing.)&lt;/p&gt;
&lt;p&gt;What struck me immediately about the photos of his restoration was the complexity of the machine and the picture he took of the thick binder titled "Maintenance Manual".
It instantly told me one thing about old computer restoration. I would really struggle to do it.&lt;/p&gt;
&lt;p&gt;The reason?&lt;/p&gt;
&lt;p&gt;Constraints.&lt;/p&gt;
&lt;p&gt;Constraints are a very important part of any work you do. When you chop down a tree: the lean of the tree, the strength and direction of the wind, the species, the age, the degree of rot,
the sharpness and bit profile of your axe, these are all constraints on that work.&lt;/p&gt;
&lt;p&gt;When you write (or more commonly edit) a computer program you have constraints as well. The tech stack, the quality/organization/cleanliness of the code base, the complexity of the problem
your edits aim to resolve, the urgency of the task, the importance of the task (note that these are separate things), the design choices of your predecessors, and on and on;
all these are common constraints of programming.&lt;/p&gt;
&lt;p&gt;There is at least one (and probably more) fundamental difference in these 2 types of work and to my eye that difference is in the constraints.
In chopping down a tree the constraints are all set by God.
In programming the constraints are nearly all set by peers and/or predecessors.&lt;/p&gt;
&lt;p&gt;When you consider a constraint like "Species of tree"  the constraint is really the behavior and properties of the wood.
For example, cedar is a soft wood, and of the softwoods it's a lot more prone to splitting and splintering (in my experience). And so when you cut one down or
do any sort of wood working with cedar you must bear that in mind in your approach to cutting it.
Compare that with a hardwood like maple or oak and your approach will greatly differ because those woods are much less given to splintering (again, in my experience).
All the constraints I can think of in chopping down a tree (unless you're a professional following some set of OSHA guide lines) are given by nature.&lt;/p&gt;
&lt;p&gt;Now consider the constrains for programming. Unless you're Dijkstra sitting around in Holland thinking up algorithms then you're almost always working with constraints
from other people. The software used to build, run, debug the code constrains you. The design of the software you're editing constrains you. The priorities of your company's leaders
constrain you. Your peers adherence to the coding standard (assuming you have one... you should...) constrains you. And whether you notice it or not the cumulative
decisions of programmers from Dennis Ritchie to Bjarne Stroustroup to Linus Torvolds to Guido van Rossum, to the countless non-famous programmers and engineers
that have ever worked on a programming language, software development tool, operating system or processor architecture constrains you.
They all solved their problems to varying degrees of completeness and success. These solutions of theirs where good enough to be co-opted by others and built upon.&lt;/p&gt;
&lt;p&gt;It makes sense that a good solution should be expanded upon, it's the way we humans have been driving innovation all throughout history.
Newton famously stated "If I have seen farther than other it is merely because I stood on the shoulders of giants" or something like that.
But Newton was observing natural laws and contributing to the expansion of our understanding of mathematics (the perfect platonic language of the gods).
He and scientist like him work(ed) in fundamental constraints provided by God (not unlike a lumberjack chopping a tree).&lt;/p&gt;
&lt;p&gt;But the poor programmer of today is less fortunate. See the building up of the software milieu is predicated on the false assumption that the software we build from is any good or
better yet, fundamentally correct (which mathematicians are lucky to be able to independently verify about the work of their progenitors).
But as my good friend and mentor Alex Quick once taught me: "The first problem with every piece of software is that it was written in the first place".
Or if you like xkcd he's got a pretty good &lt;a href="https://xkcd.com/927/"&gt;take on it&lt;/a&gt;.
And so the fundamental problem I have with programming and antique computer restoration both, is that the constraints of that work come from man.
Flawed, myopic, untrustworthy, unintuitive, bad-at-reasoning mankind calls the shots with computers.
When we get to set the rules, the constraints become arbitrary ("It was just easier if we did X")
and endless ("We can worry about Y later, right now we need to get an MVP", or my favorite "Move fast and break things").
So solving a problem in that space quickly and frustratingly becomes totally impossible.
Most of the time the best you can hope for is a diversion, or band aide rather than an actual solution (because the problem often is fundamental to the system).&lt;/p&gt;
&lt;p&gt;I'm not sure what my point is here, perhaps I'm just trying to say "I like wood more than computers" and that's definitely true.
But working with constraints is part of all work.
And although the constraints of nature are some how easier for me to stomach, it's true that if you can keep from pulling your hair out, computers,
even computers running on fossil fuel and the flawed choices of our computational forebears, can be made to do remarkable, useful and even beautiful things.
And if you are patient enough and abuse your body by sitting in a chair and shooting high intensity blue light down your retinas even you can write some software
that will do a thing just well enough for you and maybe even a few peers to get some use or even better enjoyment out of it.
And then you too, like Dennis, Bjarne, Linus, and Guido before you, will become another sinner willing evil code into our fragile universe.
Shame on us all.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate></item><item><title>High Carbon Cookery</title><link>https://owenstranathan.com/2022/01/21/high-carbon-cookery.html</link><description>&lt;p&gt;Since the world turned upside down and I began spending most days at or very near to home I generally cook my own lunch (and breakfast and dinner for that matter) everyday.
I enjoy the freedom and opportunity to eat exactly what and how I want. I'm actually a pretty good cook and at one time in my life I actually cooked for a living. Restaurants are a fun place to work
if you like fast, fierce and fiery, but they'll burn you up if you're not a special kind of crazy, which I guess I'm not. But I learned a lot working as a cook and I use that knowledge everyday of my live
when I cook for myself and my family. I credit my time in kitchens with my general interest in not just cooking food, but where food comes from(how it's grown) and where food goes (what it does in your body). These are topics
I'd like to explore more and discuss more on this blog in the future.&lt;/p&gt;
&lt;p&gt;One aspect of my cookery that I feel strongly about is my avoidance of synthetic materials (such as plastic containers and utensils), ingredients that sound like something from chemistry class and industrial seed oils like canola,
rapeseed, peanut or safflower. I'm highly suspicious of the negative effects these materials can cause my body.
Importantly what this means is that I only use metal cooking vessels &lt;strong&gt;not&lt;/strong&gt; coated with synthetic non-stick polymers. Specifically no Teflon.&lt;/p&gt;
&lt;p&gt;If you've ever cooked before then you know that food, and in particular protein, when heated likes to stick to things, especially metal. This can become messy when it comes time to clean the dishes.
There are Teflon alternatives I could use. Like the allegedly nonstick ceramic or stone coated pans. I've tried several and they work for about 3 or 4 uses, then they are permanently sticky. No amount of oil or cleaning will bring them
back to a usable state.&lt;/p&gt;
&lt;p&gt;Then of course there is what I prefer, cast iron and/or high carbon steel. These are cooking vessels made from metal with relatively high carbon content (iron or steel with added carbon).
What that high carbon content allows one to do is to make and maintain their own
nonstick surface. Now I won't pretend to know &lt;em&gt;exactly&lt;/em&gt; how this works but I know enough to give you some search terms should you want to know more.
When you heat high carbon metal to a relatively high temperature (400&amp;deg;F - 500&amp;deg;F) and you add a fat, usually in the form of oil, you will burn that fat. When you burn that fat
at that high temperature in that high carbon metal cooking vessel you will start a reaction between the carbon in the metal and the constituent chemicals in the fat/oil.
The exact nature of this reaction is where my understanding of the phenomenon ends so forgive me for not knowing what exactly it is that's in fats that cause them to react in this way with carbon.
What happens as a result of this reaction is that the fats polymerizes and &lt;em&gt;bind&lt;/em&gt; to the carbon in the metal.
If you build up a good coating of polymerized fats bonded to the outer layer of carbon-y metal on your pan you essentially create a solid oil sheath around the cooking surface of your pan.&lt;/p&gt;
&lt;p&gt;Do you know what is special about oil in cooking? Stuff doesn't stick to it, even when it's polymerized and bound to the surface of your pan.&lt;/p&gt;
&lt;p&gt;In cooking this process of building up a layer of polymerized oil on a high carbon metal such as cast iron or carbon steel is usually referred to as "Seasoning". And you may have heard some of your obnoxious
food network watching, Bon-Appetit reading friends bragging about "seasoning" their pans. I agree with you that those guys are terrible and I don't know why you're friends with them.
But they're terrible only because they boast and &lt;strong&gt;not&lt;/strong&gt; because they season their pans.
The more you use your high carbon cookware the more "seasoned" or non-stick they become. Each meal you cook becomes a part of the pan and contributes to the ease and quality of use for the next meal.&lt;/p&gt;
&lt;p&gt;I'm a firm proponent of high carbon metal cookware. Obviously not all of your pots and pans need to be carbon steel or cast iron. You don't need a non-stick surface to make a soup or most sauces
(and if you think you do, then you're doing it wrong. That's OK keep trying and you'll get the hang of it. Maybe read a recipe book or two?)
You really only &lt;strong&gt;need&lt;/strong&gt; just a couple of carbon-y cooking vessels. A saute pan, a pot and skillet ought to give you all you need in this department.
Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Saute Pan - The classic cast iron pan we all picture when we hear the words "cast iron" and "pan" together. It has a heavy flat bottom, a short handle and vertical walls that allow one make a pan sauce.&lt;/li&gt;
&lt;li&gt;Pot - You know what a pot looks like, a dutch oven is the most likely incarnation you will find (I for one have never encountered a carbon steel pot, but that doesn't mean they do not exist).&lt;/li&gt;
&lt;li&gt;Skillet - this is &lt;strong&gt;a lot&lt;/strong&gt; like a saute pan but the walls are not vertical but curvilinear from the bottom of the pan to the rim. The curvature allows one to toss the food around and do the cool 
flipping moves you see chefs do on TV. It's all in the wrist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few other specialized cast iron or carbon steel vessels you may wish to acquire if you're really in to cooking such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a crepe pan - like a saute pan but without walls just a small lip on the edge of the pan. These are used for, you guessed it, making crepes. They also make a good griddle in a pinch, some people even call them that.&lt;/li&gt;
&lt;li&gt;a griddle - this is just a big ol' flat slab of cast iron that you can cook on. Good ones typically have a rim so liquids don't escape and a flat side and a grooved side for marking meats if that's your thing.&lt;/li&gt;
&lt;li&gt;a wok - if you're using a Teflon wok then you're missing out on half the fun of using a wok. For one those Rachel Ray Paula Deen flat bottom woks are bullshit and the flat makes tossing your food around like you're &lt;strong&gt;supposed to&lt;/strong&gt;
almost impossible. But more importantly you're supposed to use woks at a super crazy high temperature and keep your food moving in them and cook &lt;strong&gt;fast&lt;/strong&gt;.
The result is seared outsides to meat and veggies with the juices intact in the former and the inner crispness intact in the latter.
Also there's the whole idea of "wok hei", but I'm not legit enough to tell you what that is or how you can get it.
The real deal woks I've only seen online (don't you use amazon now) or in Asian run restaurant supply stores (these are magical places that I highly recommend you visit if you have one near you).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cooking is a skill that you must hone with practice. Cooking with cast iron and carbon steel is a skill just the same.
You need to understand how the high carbon metal interacts with the food to use it effectively and to save yourself a lot of headache seasoning and re-seasoning your pans.
For example you should avoid if you can, adding acidic ingredients in your pan. Vinegar, tomato, citrus, all of these ingredients will strip the seasoning right off the bottom of your pan and you'll be back to square one.
But don't worry you can re-season a pan just as easily as you seasoned it. Just like cooking you add heat and fat and give it some time.&lt;/p&gt;
&lt;p&gt;When you cook with your seasoned pans you need to heat them properly and you need to use fat. I honestly think Teflon only exists because the sugar industry brainwashed entire generations of people into trying to cook eggs without
oil.
You should heat your pan to the temperature you intend to cook your food at, &lt;strong&gt;then&lt;/strong&gt; once your pan is hot add your oil, then once your oil is hot (it shimmers when it's hot) you can add your food. Hot pan, hot fat, in that order.
When you sear a steak there is a thing going on called the Maillard reaction, this is what causes the tasty crusty browning we like on the outside of a good steak. If you don't let that take place thoroughly your meat will stick to
your pan. If you don't know this and you try to sear a steak in your high carbon cookware "you're gonna have a bad time".&lt;/p&gt;
&lt;p&gt;In a way carbon cookware will teach you how to cook, albeit in a very unforgiving way (not unlike a real chef).&lt;/p&gt;
&lt;p&gt;I see a lot of youtube and general internet content about seasoning carbon steel and cast iron. This is all mostly unnecessary. You &lt;strong&gt;don't&lt;/strong&gt; need to watch 100 videos on seasoning. You &lt;strong&gt;don't&lt;/strong&gt; need to fret about carbon build up
and which oil you use when you season (I wouldn't use virgin olive oil because it burns at too low of a temperature and doesn't season the pan well. I usually use animal fats because I think they work the best).
You just need to get your pan hot, then you need to rub it down with a thin layer of oil. Then you need to let it sit on that heat for a while. Then you need to let it cool down. That's it.
People  get caught up in doing things perfectly the first time. You &lt;strong&gt;will not&lt;/strong&gt; season your pan perfectly the first time. You will &lt;strong&gt;probably&lt;/strong&gt; season it just OK the first time.
You &lt;strong&gt;will&lt;/strong&gt; destroy that seasoning in short order and have to re-season it.
You will learn how this should work as you go. Don't obsess over, don't pornograph-y the learning process and waste your short life watching other people do things. Just get up and give it a whirl.&lt;/p&gt;
&lt;p&gt;I'm a big fan of these cooking tools. They're robust, repairable, require skill, they'll last forever if you care for them, and they've got thousands of years of usage history to suggest that chemically they're safe for
human food and have a strong place in the kitchen of a healthy family. Not much in life has all that going for it anymore.&lt;/p&gt;
&lt;p&gt;I like cooking. I like eating even more. I like being and feeling healthy the most. Carbon steel and cast iron facilitates all 3 and that's why I love them.&lt;/p&gt;
&lt;p&gt;I don't have a point to this post. You should go get some cast iron and carbon steel. Don't buy a new one. Go to an antique store, or a garage sale, or if you hate fresh air and friendly faces there's always eBay.
The world doesn't need more new things. Find a use for some old things. Be creative. Love your food, love your tools and love your work. They'll love you back.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate></item><item><title>The Greatest Failure</title><link>https://owenstranathan.com/2022/03/02/the-greatest-failure.html</link><description>&lt;pre&gt;&lt;code&gt;practice (n.) - Frequently repeated action; habitual performance.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to think of my work and efforts as a series of continual and endless daily practices, the aggregate of which
constitutes a practice of itself.  Each morning I wake up at the designated time and over my coffee write in my journal
a list of my practices to attempt that day. These different practices generally fall in to 2 categories.&lt;/p&gt;
&lt;p&gt;The first are routine and mostly open ended practices with no hard deadlines for goal achievement, these are what you
might typically imagine when you think of a daily practice. Examples: Strength training, Chinese study, meditation,
walking, journaling, etc. These practices are the ones I really enjoy and that I consider to be fundamental to my
functioning as a human being, viz. they preserve my physical, emotional and psychological health and are selected and
crafted to do just that.&lt;/p&gt;
&lt;p&gt;The second types of practice are much more goal oriented and might, in many cases, fit very neatly under the umbrella
term of "work". These typically have a deadline and some sort of stake riding on their successful completion. Examples:
tasks in service of a personal project, tasks in service of a job, tasks in service of a business endeavor, a
competition training regimen, etc.  These are practices that are by their nature difficult to define, the work we do
with an ends in mind generally is always changing. Even if you have had the same job for your entire adult life, the
individual conditions of that job (the small details of the day to day execution of whatever task you may be employed to
do) change on a day to day, and in some cases hour to hour, basis. These are practices I pursue not necessarily because
I like them (though enjoyment and work are not and should not be mutually exclusive) but because I perceive them to be
necessary to attainment of a goal.&lt;/p&gt;
&lt;p&gt;Because of the inherent inconsistency of work-like practices they are much more difficult to enshrine in the sacred veil
of routine and the application of discipline to their undertaking becomes much more challenging. Furthermore the
existence of a stake, a real or perceived loss or gain coming as consequence of failure or success respectively,
introduces an added complexity of fear.&lt;/p&gt;
&lt;h1 id="fear-is-the-enemy"&gt;Fear is the enemy&lt;/h1&gt;
&lt;p&gt;Within work the fear of failure can be and often is the primary challenge to action. In the case of a wage job, the
simplest and most often employed strategy for overcoming fear is &lt;strong&gt;apathy&lt;/strong&gt;, that is; as an employee it is often
possible to avoid fear and stress by not caring or being generally not focused on the actual success of the business one
is engaged in. I think this is a big contributing factor to the commonly antagonistic relationship between employers and
employees. The "boss" may see their workers as unreliable and lazy, interested only in money. And the employee may see
their boss as greedy, stingy and uncharitable, interested only in money. In a lot of cases both are probably correct and
we're all just failing to realize that the problem is not that the other are bad people antagonizing us because they
suck. The problem with jobs is that a lot of jobs are for bad business. Businesses that concern themselves only with
money and disregard the humanity of their employees and customers. Nearly all corporate employment is like this because
corporations are organized around maximization of profit, often sacrificing humanity and compassion in that pursuit.
Even when the work is not degrading and the entity for which one is employed is not inhuman and greedy, apathy still
comes into play but more subtly. In other words, you may care about the success of the business you work for, and you
can feel troubled or stress when the business struggles or suffers a loss, but you can still get away with disregarding
the challenge this situation implies and practice no self reflection as a result. Making no attempt to change your
behavior in response to negative outcomes, shifts all responsibility for the problem and it's solution onto your
subordinates or superiors depending on the situation. Even worse this apathetic habit of not reflecting causes you to
stagnate and become a shadow of your potential. But there's no denying that it's easier to not care. By not caring &lt;em&gt;why&lt;/em&gt;
or in the former example &lt;em&gt;how&lt;/em&gt;, the power of fear is dispelled and you can work with apathy.  Being apathetic to your
&lt;strong&gt;job&lt;/strong&gt; is not necessarily a bad tactic. If you find yourself in a situation where you are forced to sell yourself to
survive, then you absolutely should employ any means necessary to get through that, but you should be careful not to
become complacent in this behavior, do not allow yourself to work apathetically for a long time finding small comfort in
things that don't matter despite the fact that you don't care about what you do everyday. Instead constantly be looking
for the exit and a life that allows you to never sell yourself but instead work on that which you find important and
work that enriches you more than monetarily. If you fall into this trap it's because you've not overcome your fear, but
you've shifted it. Your fear of failure at work that you've belayed with apathy has become your fear of failure doing
what you actually care about, and now your stuck at some stupid job. Recognize that your inertia to remain at the job
you hate and don't care about isn't a rational decision, it's actually just the fear you've kicked down the road.
In the interest of remaining nuanced, having a shit job you hate doesn't make you a coward automatically. You may just
be on the war path still and forced to make some compromise. Don't let that turn into apathy. Remember always that fear
is the enemy and keep pushing.&lt;/p&gt;
&lt;h1 id="fear-is-the-challenge"&gt;Fear is the challenge&lt;/h1&gt;
&lt;p&gt;When one is engaged in their own work, viz. work they personally profit from and genuinely care about, it is no longer a
viable strategy to be an apathetic worker. This is a challenge that must be overcome and not avoided. Overcoming fear of
failure, in my experience so far, is most difficult the challenge to beginning and, importantly, &lt;strong&gt;continuing&lt;/strong&gt; any
meaningful endeavor. And the higher the stakes the greater the fear.  There is only one method I've found for overcoming
such fear and it is not a permanent remedy, but one that must be continually applied daily and even multiple times a day
(a practice even), that is &lt;strong&gt;Rationality&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When fear takes hold and begins to creep into my thoughts about work and the practice demanded in that work the only
way I've found to overcome it is with consistent meditation, rational thinking, planning and self talk.&lt;/p&gt;
&lt;h3 id="meditation"&gt;Meditation&lt;/h3&gt;
&lt;p&gt;I have found that good place to start is with meditation. Taking time to be still and focus my mind
I try to meditate every day, even if I'm not planning on doing any work that day.&lt;/p&gt;
&lt;h3 id="rational-thinking"&gt;Rational Thinking&lt;/h3&gt;
&lt;p&gt;After I've cooled off, I look deeply at the challenge of the work ahead of you and the fear of failure I feel. I
consider the consequence of failure and what it will mean to fail and how it will affect me in my life and
relationships. It's important that in this step I be rational and don't allow fear to warp reality or suddenly make the
extremely unlikely a certainty.&lt;/p&gt;
&lt;h3 id="self-talk"&gt;Self talk&lt;/h3&gt;
&lt;p&gt;Next I start talking myself through the fear and steel myself against the consequences of failure. I've found developing
a mantra for to be a valuable tool just about everything that comes out of David Goggins' mouth could be a good mantra
for this. But my favorite lately has been&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;No project is ever complete, only abandoned.
The only true failure is never starting.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But a close second is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Who's gonna carry the boats?
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="planning"&gt;Planning&lt;/h3&gt;
&lt;p&gt;Finally I make a plan for how I'm going to continue. Nothing spectacular, just an outline of everything I think I need
to do to make my goal a reality. There's usually a lot more to do than I can imagine but it's good to have an idea.&lt;/p&gt;
&lt;h1 id="courage-is-a-practice"&gt;Courage is a practice&lt;/h1&gt;
&lt;p&gt;This is a practice and it's important to treat it that way. I don't get bogged down in making sure I do it perfectly. I
just try. This practice is like the warm up to a workout it's not important that you do it well, just that you do it
consistently. So just like with working out. "Just do the damn warm up and the work out will come easy"&lt;/p&gt;
&lt;p&gt;This intellectual and practical response to fear is difficult to practice and it's not as immediately relieving as
apathy. But as I outlined above apathy is not a real option if your work really matters.  For me at least, it gives me
the courage to bear down and just get started on the work I'm afraid to fuck up and begin the practice of creation and
failure teaches and nourishes me.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate></item><item><title>DIY Life: Making a static site compiler</title><link>https://owenstranathan.com/2020/08/25/writing-a-static-site-generator.html</link><description>&lt;p&gt;I used to use Jekyll. I didn't choose Jekyll, Jekyll just happened to be the software available
with support from github pages, which is where I host my website. I have some gripes about Jekyll,
I won't enumerate them, but they are the same gripes I have about a lot of general purpose software.
This is just what using software is like. That said, it's nice when software sucks in some way and rather
than being frustrated about it you can do a little this and that and make it better, good even.&lt;/p&gt;
&lt;p&gt;I also use Windows 10, there are many things I don't like about Windows 10, things I would change.
But I'm not gonna make my own operating system, ain't gonna happen. I'm not even gonna do the laborious
work of maintaining the 10 million config files required to have my ideal Linux desktop with i3 and fancy keyboard bindings,
and ranger and all the things. Because after you factor in the time spent configuring all the tools, I won't save that much time.
Windows is good enough, and most of the time good enough is good enough. Likewise with Firefox; do I wish that Firefox had native vim bindings? Yes.
Am I going to extend it or otherwise hack it to add them? No. Vimvixen is good enough.
But operating systems and web browsers are complex software applications, and there are a lot of good reasons not go altering them willy nilly.
Something, something... &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Chesterton%27s_fence"&gt;Chesterton's fence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, Jekyll doesn't do anything complicated (at least not for me, maybe it &lt;strong&gt;can&lt;/strong&gt; do complex things but it's not obvious).
Compiling a list of files written in markdown and running a template engine on a handful of other files
to produce a static website isn't complex. And more over, I frequently find myself wishing I could do such and such a thing with Jekyll and end up
combing google and Jekyll docs looking for the right liquid incantations to do so. But I know how to program a computer to munge some files and I'm
halfway decent with python. So why don't I just do it myself?&lt;/p&gt;
&lt;p&gt;Well I did. The result is a purpose built custom site compiler that I highly recommend you DO NOT COPY. (Because you can do better yourself, or 
rather; you can do better FOR yourself).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/owenstranathan/static-markdown-site-compiler"&gt;Here&lt;/a&gt; is the result. It depends on Jinja2 and Markdown, I prefer not to use pip packages if I can help it but whatever, I ain't writing &lt;a href="https://github.com/owenstranathan/bash-templater"&gt;another&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; template
engine.
I only tested it on windows. Because again I just don't have time for Linux anymore.&lt;/p&gt;
&lt;p&gt;The site compiler is what built this website. And I can honestly say that at the time of writing I feel that it was worth the 1 - 2 hours it took me to trial and error my way to the current product.
If I need something I can add it, but most of the time I don't because I know it's more work than it's worth (which was never clear before I knew every detail of the system).
The only Jekyll features I miss are &lt;code&gt;--watch&lt;/code&gt; (which watches the files in the project for changes and recompiles the site when you change something) and &lt;code&gt;--serve&lt;/code&gt; (which servers the site from a local dev server).
I can totally implement them because python has built in http dev server, and I don't need anything too fancy for watching the files, but it's a nontrivial task that I don't have time for right now. Maybe soon.&lt;/p&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically I didn't author bash-templater. But if you diff my fork from the parent you'll see that I've made enough changes that I feel justified in saying that I've "written" a bash template engine.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate></item><item><title>Unity Input Controller</title><link>https://owenstranathan.com/2020/02/28/unity-input-controller.html</link><description>&lt;h3 id="backstory"&gt;Backstory&lt;/h3&gt;
&lt;p&gt;&lt;a href="#succinct-description-of-goals"&gt;Just get to the code bud.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm 26 years old. That places me firmly in the console only generation. What that means is that I started gaming well after the
proliferation and success of game consoles. My fist console was the Super Nintendo (actually it was my brother Ian's),
followed by a PlayStation(also Ian's), and then a Nintendo GameCube(you guessed it... Ian's) and an Xbox(Ian and I both had one),
then an Xbox 360(Mine!), Wii(Ian's, but it was a gift from me), PlayStation 3(Mine!) and most recently a 
Nintento Switch and PlayStation 4(Mine, but it was a gift from Ian &amp;amp; my wife). As you can see I didn't play any PC games growing up
(other than Diablo and Starcraft). &lt;/p&gt;
&lt;p&gt;So what does all this have to do with anything? Well besides illustraiting the growth, friendship and love of a beautiful brotherhood.
My history with consoles separates me (and others like me) from the people that have played PC games their whole lives,
in that I am most comfortable playing video games using a game controller. In fact it wasn't until after the Wii/Xbox 360/PlayStation 3 generation of consoles that 
I built my first gaming PC, I was 16 years old. So my gaming brain was already mostly developed and it understood joysticks and buttons and analog triggers
a lot better than mice and keyboards. And this has not changed in the interveneing 10 years since I build that first PC and started to get into PC gaming.&lt;/p&gt;
&lt;p&gt;This has been a persistent problem for me with prototyping games. When you're prototyping games you want to move as quickly as possible,
just implementing the bare minimum to actualize an idea to see if it's worth exploring more.
However in my experience the unity input system does not make it easy to configure controllers quickly and efficiently.
This makes it hard for me while I'm prototyping because I think about games with controller input in mind,
and I actually have to make extra mental effort to think about how to sensibly
map controls to mouse and keyboard input. This is a problem because if my prototype feels weird because the control scheme &lt;strong&gt;is not&lt;/strong&gt;
comfortable or intuitive (mouse and keyboard) then its distracting me from the good parts of the idea that I want focus on and develop.&lt;/p&gt;
&lt;p&gt;My most recent encounter with this problem took me on a moderately deep dive into the unity input system.
The result of which has turned out to be a fairly simple yet powerful input management scheme.&lt;/p&gt;
&lt;h3 id="succinct-description-of-goals"&gt;Succinct Description of Goals:&lt;/h3&gt;
&lt;p&gt;I want:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;game controller input in my unity prototype.&lt;/li&gt;
&lt;li&gt;controller input to be easily and sensibly configurable (which by default in Unity it is not).&lt;/li&gt;
&lt;li&gt;to be able to swap what kind of controller(PlayStation 4, Xbox 360, Switch Pro, etc.) I'm using with very little fuss and reconfiguration.&lt;/li&gt;
&lt;li&gt;my behaviors to plug into an input event system to allow them to detect input without lot's of &lt;code&gt;if(Input.GetButtonDown(....))&lt;/code&gt; type code all over the place.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before I go rambling more, have a look at the code.&lt;/p&gt;
&lt;h1 id="code"&gt;Code&lt;/h1&gt;
&lt;p&gt;There are 4 primary source files and 1 &lt;code&gt;.asset&lt;/code&gt; file of interest in this system of capturing input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;InputMap.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum InputAxis
{
    A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, A27, NONE
}

public enum InputButton
{
    B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, NONE
}

[System.Serializable]
public class AxisInversion {
    public bool Horizontal = false;
    public bool Vertical = false;
}

[System.Serializable]
public class ControlStick {
    public InputAxis Horizontal = InputAxis.NONE;
    public InputAxis Vertical = InputAxis.NONE;
    public InputButton Press = InputButton.NONE;
    public AxisInversion Inversion;
}

[System.Serializable]
public class DPadAxes {
    public InputAxis Horizontal = InputAxis.NONE; // assuming 1 for right and -1 for left
    public InputAxis Vertical = InputAxis.NONE; // assuming 1 for up and -1 for down
    public AxisInversion Inversion; // flip assumption
}

[System.Serializable]
public class DPadButtons {
    public InputButton Left = InputButton.NONE;
    public InputButton Down = InputButton.NONE;
    public InputButton Right = InputButton.NONE;
    public InputButton Up = InputButton.NONE;
}


[CreateAssetMenu(fileName = &amp;quot;InputMap&amp;quot;, menuName = &amp;quot;ScriptableObjects/Input Map&amp;quot;, order = 1)]
public class InputMap : ScriptableObject
{
    public string Name;
    public ControlStick LeftStick;
    public ControlStick RightStick;
    public DPadAxes DPadAxes;
    public InputAxis L2Analog = InputAxis.NONE;
    public InputAxis R2Analog = InputAxis.NONE;

    public DPadButtons DPadButtons;
    public InputButton L1 = InputButton.NONE;
    public InputButton R1 = InputButton.NONE;
    public InputButton L2 = InputButton.NONE;
    public InputButton R2 = InputButton.NONE;
    public InputButton ButtonLeft = InputButton.NONE;
    public InputButton ButtonBottom = InputButton.NONE;
    public InputButton ButtonRight = InputButton.NONE;
    public InputButton ButtonTop = InputButton.NONE;
    public InputButton Start = InputButton.NONE;
    public InputButton Select = InputButton.NONE;
    public InputButton Extra1 = InputButton.NONE;
    public InputButton Extra2 = InputButton.NONE;
    public InputButton Extra3 = InputButton.NONE;
    public InputButton Extra4 = InputButton.NONE;
    public InputButton Extra5 = InputButton.NONE;
    public InputButton Extra6 = InputButton.NONE;
    public InputButton Extra7 = InputButton.NONE;
    public InputButton Extra8 = InputButton.NONE;
    public InputButton Extra9 = InputButton.NONE;
    public InputButton Extra10 = InputButton.NONE;
    public InputButton Extra11 = InputButton.NONE;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;InputTest.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(InputController))]
[ExecuteInEditMode]
public class InputTest : MonoBehaviour
{
    public const int numAxes = 28;
    public const int numButtons = 20;
    public bool testAxes = true;
    public bool testButtons = true;
    public bool[] Axes = new bool[numAxes];
    public bool[] Buttons = new bool[numButtons];
    private InputController inputController;

    void Start() {
        inputController = inputController ?? GetComponent&amp;lt;InputController&amp;gt;();
        Debug.Assert(inputController != null);
    }

    void Update() {
        var name = inputController.Number.ToString();
        if (testAxes) {
            for (int i = 0; i &amp;lt; numAxes; ++i) {
                if (Axes[i]) {
                    var axisName = $&amp;quot;{name}A{i}&amp;quot;;
                    var axis = Input.GetAxis(axisName);
                    if (axis != 0) {
                        Debug.Log($&amp;quot;A{i}: {axis}&amp;quot;);
                    }
                }
            }
        }
        if (testButtons) {
            for (int i = 0; i &amp;lt; numButtons; ++i) {
                if (Buttons[i]) {
                    var buttonName = $&amp;quot;{name}B{i}&amp;quot;;
                    if (Input.GetButtonDown(buttonName)) {
                        Debug.Log(buttonName);
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;InputController.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum ControllerNumber
{
    J1 = 1,
    J2 = 2
}

public enum Button
{
    DPadLeft,
    DPadDown,
    DPadRight,
    DPadUp,
    ButtonLeft, // X on Xbox, Square on PS4, Y on Switch, etc.
    ButtonBottom, // A on Xbox, X on PS4, B on Switch, etc.
    ButtonRight, // B on Xbox, Circle on PS4, A on Switch, etc.
    ButtonTop, // Y on Xbox, Triangle on PS4, X on Switch, etc.
    L1, // Left Bumper
    R1, // Right Bumper
    L2, // Left Trigger (digital, use OnLeftTrigger for analog)
    R2, // Right Trigger (digital, use OnRightTrigger for analog)
    L3, // Left stick
    R3, // Right stick
    Start, // What was classically start (Right center button)
    Select, //  What was classically select (Left center button)
            // All Extras are for home button or other system specific weirdness
    Extra1, Extra2, Extra3, Extra4, Extra5, Extra6, Extra7, Extra8, Extra9, Extra10
}

public class InputController : MonoBehaviour
{
    public ControllerNumber Number;
    public InputMap InputMap;

    // Delegates
    public delegate void Stick(float horizontal, float vertical);
    public delegate void DPad(float horizontal, float vertical);
    public delegate void AnalogTrigger(float activation);
    public delegate void ButtonDown(Button button);

    // Events
    public event Stick OnLeftStick;
    public event Stick OnRightStick;
    public event AnalogTrigger OnLeftTrigger;
    public event AnalogTrigger OnRightTrigger;
    public event DPad OnDPad;
    public event ButtonDown OnButtonDown;


    void Start() {
        if (InputMap == null)
        {
            Debug.LogError(&amp;quot;You must set the InputMap attribute!&amp;quot;);
        }
    }

    void Update() {
        var name = Number.ToString();

        var LeftStickH = (InputMap.LeftStick.Inversion.Horizontal ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.LeftStick.Horizontal}&amp;quot;);
        var LeftStickV = (InputMap.LeftStick.Inversion.Vertical ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.LeftStick.Vertical}&amp;quot;);
        if (LeftStickH != 0 || LeftStickV != 0)
        {
            OnLeftStick?.Invoke(LeftStickH, LeftStickV);
        }
        var RightStickH = (InputMap.RightStick.Inversion.Horizontal ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.RightStick.Horizontal}&amp;quot;);
        var RightStickV = (InputMap.RightStick.Inversion.Vertical ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.RightStick.Vertical}&amp;quot;);
        if (RightStickH != 0 || RightStickV != 0)
        {
            OnRightStick?.Invoke(RightStickH, RightStickV);
        }
        var DPadH = (InputMap.DPadAxes.Inversion.Horizontal ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.DPadAxes.Horizontal}&amp;quot;);
        var DPadV = (InputMap.DPadAxes.Inversion.Vertical ? -1 : 1) * Input.GetAxis($&amp;quot;{name}{InputMap.DPadAxes.Vertical}&amp;quot;);
        if (DPadH != 0 || DPadV != 0)
        {
            OnDPad?.Invoke(DPadH, DPadV);
        }
        var L2Analog = Input.GetAxis($&amp;quot;{name}{InputMap.L2Analog}&amp;quot;);
        if (L2Analog != 0) { OnLeftTrigger?.Invoke(L2Analog); }
        var R2Analog = Input.GetAxis($&amp;quot;{name}{InputMap.R2Analog}&amp;quot;);
        if (R2Analog != 0) { OnRightTrigger?.Invoke(R2Analog); }

        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.DPadButtons.Left}&amp;quot;)) { OnButtonDown?.Invoke(Button.DPadLeft); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.DPadButtons.Down}&amp;quot;)) { OnButtonDown?.Invoke(Button.DPadDown); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.DPadButtons.Right}&amp;quot;)) { OnButtonDown?.Invoke(Button.DPadRight); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.DPadButtons.Up}&amp;quot;)) { OnButtonDown?.Invoke(Button.DPadUp); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.L1}&amp;quot;)) { OnButtonDown?.Invoke(Button.L1); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.R1}&amp;quot;)) { OnButtonDown?.Invoke(Button.R1); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.L2}&amp;quot;)) { OnButtonDown?.Invoke(Button.L2); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.R2}&amp;quot;)) { OnButtonDown?.Invoke(Button.R2); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.LeftStick.Press}&amp;quot;)) { OnButtonDown?.Invoke(Button.L3); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.RightStick.Press}&amp;quot;)) { OnButtonDown?.Invoke(Button.R3); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonLeft}&amp;quot;)) { OnButtonDown?.Invoke(Button.ButtonLeft); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonBottom}&amp;quot;)) { OnButtonDown?.Invoke(Button.ButtonBottom); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonRight}&amp;quot;)) { OnButtonDown?.Invoke(Button.ButtonRight); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonTop}&amp;quot;)) { OnButtonDown?.Invoke(Button.ButtonTop); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Start}&amp;quot;)) { OnButtonDown?.Invoke(Button.Start); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Select}&amp;quot;)) { OnButtonDown?.Invoke(Button.Select); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra1}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra1); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra2}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra2); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra3}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra3); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra4}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra4); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra5}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra5); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra6}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra6); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra7}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra7); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra8}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra8); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra9}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra9); }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.Extra10}&amp;quot;)) { OnButtonDown?.Invoke(Button.Extra10); }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;InputListener.cs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InputListener : MonoBehaviour
{
    public InputController InputController;

    public virtual void Subscribe(InputController inputController) {
        inputController.OnLeftStick += OnLeftStick;
        inputController.OnRightStick += OnRightStick;
        inputController.OnLeftTrigger += OnLeftTrigger;
        inputController.OnRightTrigger += OnLeftTrigger;
        inputController.OnDPad += OnDPad;
        inputController.OnButtonDown += OnButtonDown;

    }

    public virtual void Unsubscribe(InputController inputController) {
        inputController.OnLeftStick -= OnLeftStick;
        inputController.OnRightStick -= OnRightStick;
        inputController.OnLeftTrigger -= OnLeftTrigger;
        inputController.OnRightTrigger -= OnLeftTrigger;
        inputController.OnDPad -= OnDPad;
        inputController.OnButtonDown -= OnButtonDown;
    }

    public virtual void OnLeftStick(float horizontal, float vertical) { }
    public virtual void OnRightStick(float horizontal, float vertical) { }
    public virtual void OnLeftTrigger(float activation) { }
    public virtual void OnRightTrigger(float activation) { }
    public virtual void OnDPad(float horizontal, float vertical) { }
    public virtual void OnButtonDown(Button button) { }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;InputManager.asset&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!13 &amp;amp;1
InputManager:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Axes:
  - serializedVersion: 3
    m_Name: J1A0
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 0
    type: 2
    axis: 0
    joyNum: 1
  - serializedVersion: 3
    m_Name: J1A1
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 1
    type: 2
    axis: 1
    joyNum: 1
  - serializedVersion: 3
    m_Name: J1A2
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 0
    type: 2
    axis: 2
    joyNum: 1
# ...
# ... Large portion omitted for brevity ...
# ...
  - serializedVersion: 3
    m_Name: J1A27
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 0
    type: 2
    axis: 27
    joyNum: 1
  - serializedVersion: 3
    m_Name: J1B0
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 0
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1
  - serializedVersion: 3
    m_Name: J1B1
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 1
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1
# ...
# ... Large portion omitted for brevity ...
# ...
  - serializedVersion: 3
    m_Name: J1B19
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 19
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1
  - serializedVersion: 3
    m_Name: J1NONE
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1 

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="unityengineinput-and-the-inputmanager-asset-1"&gt;&lt;code&gt;UnityEngine.Input&lt;/code&gt; and the InputManager Asset &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;First let's talk about the unity input system as it exists today. &lt;a href="https://docs.unity3d.com/Manual/ConventionalGameInput.html"&gt;Relevant unity documentation about "Conventional Game Input"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Super high level, the way that it works is, Unity interfaces with the OS to detect events coming from Input devices.
It translates those system level input events into Unity input values accessible through the &lt;code&gt;Input&lt;/code&gt; class.
All input at the unity level can be thought of as a "Virtual Axis" what that means is every input can take a value between 1 and -1 with 0 meaning
no input. This makes lots of sense for say a joystick, but it's a little less intuitive for almost all the other buttons on a controller.
The reason that the inputs are configured as virtual axes is so you can define your own -1 to 1 interval using any buttons you like. This is
done by setting a "positive" and "negative" button for a given named input.
Lets take quick look at the default input set up.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Default Input Settings" src="img/InputController/InputSettingsDefault.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can see that the unity input settings are preconfigured with 18 inputs (i.e. it's an array of 18 virtual axis configurations)
I wont go to in detail about what all the settings do, because I don't know. Just know that this is where you're going to configure your input.
I've you've never done that then I highly recommend deleting all the preconfigured inputs and adding all your own to get a feel for how it works.&lt;/p&gt;
&lt;p&gt;If you just want to copy me then you still need to delete all the existing inputs, do this by setting the size of the settings array to 0.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty InputSettings" src="img/InputController/InputSettingsEmpty.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once we've done this let's replace those old default settings with something a little more uniform.  &lt;/p&gt;
&lt;p&gt;It's important remember that the inputs are accessed by &lt;strong&gt;name&lt;/strong&gt; at runtime with something like &lt;code&gt;Input.GetAxis("MyStupidInputSettingName")&lt;/code&gt;
Our system is going to aim to abstract that away so we need a uniform naming scheme, it doesn't need to be complex or clever, just automatable and
understandable to someone reading the code. The simplest one I came up with was &lt;code&gt;J%nA%a&lt;/code&gt; and &lt;code&gt;J%nB%b&lt;/code&gt; where &lt;code&gt;%n&lt;/code&gt; is the 
joystick number, &lt;code&gt;%a&lt;/code&gt; is the axis number, and &lt;code&gt;%b&lt;/code&gt; is the button number &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So for each controller we'll have 28 axes numbered 0-27 (&lt;code&gt;J%nA0&lt;/code&gt;-&lt;code&gt;J%nA27&lt;/code&gt;) and 20 buttons numbered 0-19 (&lt;code&gt;J%nB0&lt;/code&gt;-&lt;code&gt;J%nB19&lt;/code&gt;).
We'll have 1 additional input for each controller called &lt;code&gt;J%nNONE&lt;/code&gt; We'll use this to map axes and buttons not used but 
a given controller scheme. This is kind of a chore to set up with the unity serialization ui window for input settings. So I 
recommend using a power editor of your choice (&lt;strong&gt;&lt;em&gt;&amp;#42;cough&amp;#42;&lt;/em&gt;&lt;/strong&gt; vim &lt;strong&gt;&lt;em&gt;&amp;#42;cough&amp;#42;&lt;/em&gt;&lt;/strong&gt;) to make a macro for each input type and just blow through
writing the yaml that way, the settings are serialized as YAML in &lt;code&gt;/ProjectSettings/InputManager.asset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each axis will define an entry in a yaml list (which is how the settings array gets serialized).
each item in that list will set the &lt;code&gt;n_Name&lt;/code&gt; following scheme described above. It will also set
&lt;code&gt;joyNum&lt;/code&gt; to the joyStick number, &lt;code&gt;axis&lt;/code&gt; to the axis number as well as &lt;code&gt;dead&lt;/code&gt; and &lt;code&gt;sensitivity&lt;/code&gt;(these should be set
according to preference). This is done for once for each axis for each controller, so there will be 28 * N axis inputs
(where N=number of configured controllers). If you want to you can just set up all 16, but I doubt your game will support local
16 player, so you should probably limit it to the number of controllers you mean to support.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;
  - serializedVersion: 3
    m_Name: J1A0
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0.19
    sensitivity: 1
    snap: 0
    invert: 0
    type: 2
    axis: 0
    joyNum: 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each button will set &lt;code&gt;joyNum&lt;/code&gt; in the same way that we did for axes as well as &lt;code&gt;m_Name&lt;/code&gt; using the scheme for buttons,
but will only need to set &lt;code&gt;positiveButton&lt;/code&gt; to &lt;code&gt;joystick button %n&lt;/code&gt; where again &lt;code&gt;%n&lt;/code&gt; is the button number.
Just like the axes there needs to be one for each button for each controller.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;
  - serializedVersion: 3
    m_Name: J1B0
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: joystick button 0
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we set the null input &lt;code&gt;J%nNONE&lt;/code&gt; like an axis with no sensitivity&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;  - serializedVersion: 3
    m_Name: J1NONE
    descriptiveName: 
    descriptiveNegativeName: 
    negativeButton: 
    positiveButton: 
    altNegativeButton: 
    altPositiveButton: 
    gravity: 0
    dead: 0
    sensitivity: 0
    snap: 0
    invert: 0
    type: 0
    axis: 0
    joyNum: 1 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that done we can detect input on any of our controller through &lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
Input.GetAxis($&amp;quot;J{joyNum}A{axis}&amp;quot;);
Input.GetButtonDown($&amp;quot;J{joyNum}B{button}&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is great but it's still not very useful. Different controllers will have different configurations of this
scheme. So for example a Dual Shock 4(Playstation 4) might have it's left stick horizontal and vertical axis on &lt;code&gt;A0&lt;/code&gt; and &lt;code&gt;A2&lt;/code&gt; respectively.
Whereas an Xbox 360 controller might have it on &lt;code&gt;A0&lt;/code&gt; and &lt;code&gt;A1&lt;/code&gt;.
In fact I've even witnessed input mappings varying for a single controller just between wireless mode and wired.
So we need a way to define which inputs map to what buttons for a given controller. This sounds like a job for scriptable objects.&lt;/p&gt;
&lt;h3 id="inputmapcs"&gt;InputMap.cs&lt;/h3&gt;
&lt;p&gt;This brings us to the first piece of source we're gonna look at the &lt;code&gt;InputMap&lt;/code&gt;.
The &lt;code&gt;InputMap&lt;/code&gt; class is a Unity &lt;code&gt;ScriptableObject&lt;/code&gt; that serves to map between our input scheme and an interface that we can understand
and that makes sense. The goal here is be able to get a controllers input state with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
var leftStickVertical = Input.GetAxis(inputMap.LeftStick.Vertical);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks a lot more manageable. Let's talk about how to do that.
My initial implementation just had a string from each highlevel input name I wanted
(LeftStick[Vertical|Horizontal], RightStick[...], L1, R1, ButtonTop, ButtonBottom, etc..) which would return the axis or button it maps to.
However I decided that its a little bit safer to define enumerations for each possible button and axis and define the &lt;code&gt;InputMap&lt;/code&gt; scriptable object to
take those enumeration types as it's members. Let's take a look at those enums.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
public enum InputAxis
{ 
    A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, A27, NONE
}

public enum InputButton
{
    B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, NONE
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's not too complicated. There are 2 different enums and each one has a value for each of the possible axes or buttons respectively.&lt;/p&gt;
&lt;p&gt;I also made a few convenience classes to help model the structure of a controller.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
[System.Serializable]
public class AxisInversion {
    public bool Horizontal = false;
    public bool Vertical = false;
}

[System.Serializable]
public class ControlStick {
    public InputAxis Horizontal = InputAxis.NONE;
    public InputAxis Vertical = InputAxis.NONE;
    public InputButton Press = InputButton.NONE;
    public AxisInversion Inversion;
}

[System.Serializable]
public class DPadAxes {
    public InputAxis Horizontal = InputAxis.NONE; // 1 for right and -1 for left
    public InputAxis Vertical = InputAxis.NONE; // 1 for up and -1 for down
    public AxisInversion Inversion; // flip above assumptions
}

[System.Serializable]
public class DPadButtons {
    public InputButton Left = InputButton.NONE;
    public InputButton Down = InputButton.NONE;
    public InputButton Right = InputButton.NONE;
    public InputButton Up = InputButton.NONE;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These classes just wrap up the data that constitutes a single joy stick for a controller. As well as a DPad configured as either axes or 
buttons.&lt;/p&gt;
&lt;p&gt;Finally we have the actual &lt;code&gt;InputMap&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
[CreateAssetMenu(fileName = &amp;quot;InputMap&amp;quot;, menuName = &amp;quot;ScriptableObjects/InputMap&amp;quot;, order = 1)]
public class InputMap : ScriptableObject
{
    public InputType Type;
    public ControlStick LeftStick;
    public ControlStick RightStick;
    public DPadAxes DPadAxes;
    public DPadButtons DPadButtons;
    public InputAxis L2Analog = InputAxis.NONE;
    public InputAxis R2Analog = InputAxis.NONE;
    public InputButton L1 = InputButton.NONE;
    public InputButton R1 = InputButton.NONE;
    public InputButton L2 = InputButton.NONE;
    public InputButton R2 = InputButton.NONE;
    public InputButton ButtonLeft = InputButton.NONE;
    public InputButton ButtonBottom = InputButton.NONE;
    public InputButton ButtonRight = InputButton.NONE;
    public InputButton ButtonTop = InputButton.NONE;
    public InputButton Start = InputButton.NONE;
    public InputButton Select = InputButton.NONE;
    public InputButton Extra1 = InputButton.NONE;
    public InputButton Extra2 = InputButton.NONE;
    public InputButton Extra3 = InputButton.NONE;
    public InputButton Extra4 = InputButton.NONE;
    public InputButton Extra5 = InputButton.NONE;
    public InputButton Extra6 = InputButton.NONE;
    public InputButton Extra7 = InputButton.NONE;
    public InputButton Extra8 = InputButton.NONE;
    public InputButton Extra9 = InputButton.NONE;
    public InputButton Extra10 = InputButton.NONE;
    public InputButton Extra11 = InputButton.NONE;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see it has all the buttons and joysticks you would expect a controller to have and then some. It also makes use of a
unity engine c# attribute &lt;code&gt;CreateAssetMenu&lt;/code&gt; which will make a menu item for creating a new scriptable object asset of type &lt;code&gt;InputMap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create Asset Menu" src="img/InputController/CreateAssetMenu.png" /&gt;&lt;/p&gt;
&lt;h3 id="inputtestcs"&gt;InputTest.cs&lt;/h3&gt;
&lt;p&gt;Cool. So now that we have an &lt;code&gt;InputMap&lt;/code&gt; Scriptable Object class we can configure a new &lt;code&gt;InputMap&lt;/code&gt; asset for our controller.
The best way to figure out how a given controller maps to unity's input system is to just plug it in and
see which inputs it's triggering. Luckily we've already done all the work of wiring up every single possible input to a 
named and configured input setting so all we need is a little test script to check every single input setting and 
log which input is firing.&lt;/p&gt;
&lt;p&gt;Let's see what that looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
[ExecuteInEditMode]
public class InputTest : MonoBehaviour
{
    public const int numAxes = 28;
    public const int numButtons = 21;
    public bool testAxes = true;
    public bool testButtons = true;
    public bool[] Axes = new bool[numAxes];
    public bool[] Buttons = new bool[numButtons];

    void Update()
    {
        var name = &amp;quot;J1&amp;quot;;
        if (testAxes)
        {
            for (int i = 0; i &amp;lt; numAxes; ++i)
            {
                if (Axes[i])
                {
                    var axisName = $&amp;quot;{name}A{i}&amp;quot;;
                    var axis = Input.GetAxis(axisName);
                    if (axis != 0)
                    {
                        Debug.Log($&amp;quot;A{i}: {axis}&amp;quot;);
                    }
                }
            }
        }
        if (testButtons)
        {
            for (int i = 0; i &amp;lt; numButtons; ++i)
            {
                if (Buttons[i])
                {
                    var buttonName = $&amp;quot;{name}B{i}&amp;quot;;
                    if (Input.GetButtonDown(buttonName))
                    {
                        Debug.Log(buttonName);
                    }
                }
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this script just checks every single input possible and outputs it's name (using the scheme we devised) when it's triggered.
Using this script it's easy to figure out the layout of any controller, all we have to do is attach the script to an empty game object in our scene,
plug in our controller and start pressing buttons. The names of the input should appear in the console window when the corresponding
button is pressed &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In the picture below you can see that I've named the Game Object that our script &lt;code&gt;InputTest.cs&lt;/code&gt; is attached to "controller" and if you look at the
inspector you can see the array of axis inputs as well as our booleans for testing buttons and axis
(not pictured but further down the inspector's scroll area is the array of button inputs, axis 4 and 5 are disabled because they are the
L2 and R2 analog inputs on the wireless Dual Shock 4 controller that I'm using.&lt;sup id="fnref2:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Input Test Example" src="img/InputController/InputTest.png" /&gt;&lt;/p&gt;
&lt;h3 id="configuring-an-inputmap-asset"&gt;Configuring an InputMap asset&lt;/h3&gt;
&lt;p&gt;Now we can piece together our input mapping for our controller using the procedure we outlined above. These are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the Asset menu to create a new input map asset. ( Assets &amp;gt; Create &amp;gt; Scriptable Objects &amp;gt; Input Map)&lt;/li&gt;
&lt;li&gt;Name your input map accordingly (I'm using a wireless Dual Shock 4 controller so I'm naming mine &lt;code&gt;DualShock4Wireless.asset&lt;/code&gt;
I'm differentiating wired and wireless because I happen to know that the mapping will be different depending on the mode.
(I know it's stupid, that's why we're doing all this))&lt;/li&gt;
&lt;li&gt;Click on the new asset to view it in the inspector.&lt;/li&gt;
&lt;li&gt;Play your project and press buttons to observe which name they have.&lt;/li&gt;
&lt;li&gt;Record those names accordingly in your InputMap asset.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mine looks like this &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Input Map Configuration Example" src="img/InputController/InputMapConfiguration.png" /&gt;&lt;/p&gt;
&lt;h3 id="inputcontrollercs"&gt;InputController.cs&lt;/h3&gt;
&lt;p&gt;Next we are gonna build out the system that will allow our behaviors to receive events from our input system
but writing functions like &lt;code&gt;OnLeftStick&lt;/code&gt; or &lt;code&gt;OnButtonDown&lt;/code&gt;. To do this we're going to be making use of the C# event/delegate system (pattern?).&lt;/p&gt;
&lt;p&gt;This is were the real magic of our system is going to take place.&lt;/p&gt;
&lt;p&gt;To kick things off let's take a gander at those 2 enums at the top of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
public enum ControllerNumber
{
    J1 = 1,
    J2 = 2
}

public enum Button
{
    DPadLeft,
    DPadDown,
    DPadRight,
    DPadUp,
    ButtonLeft, // X on Xbox, Square on PS4, Y on Switch, etc.
    ButtonBottom, // A on Xbox, X on PS4, B on Switch, etc.
    ButtonRight, // B on Xbox, Circle on PS4, A on Switch, etc.
    ButtonTop, // Y on Xbox, Triangle on PS4, X on Switch, etc.
    L1, // Left Bumper
    R1, // Right Bumper
    L2, // Left Trigger (digital, use OnLeftTrigger for analog)
    R2, // Right Trigger (digital, use OnRightTrigger for analog)
    L3, // Left stick
    R3, // Right stick
    Start, // What was classically start (Right center button)
    Select, //  What was classically select (Left center button)
            // All Extras are for home button or other system specific weirdness
    Extra1, Extra2, Extra3, Extra4, Extra5, Extra6, Extra7, Extra8, Extra9, Extra10
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think these are fairly self explanitory, but let's talk about it.&lt;/p&gt;
&lt;p&gt;Fhe first enum &lt;code&gt;ControllerNumber&lt;/code&gt; is just what is sounds like the number of a controller so if your on joystick 1 (&lt;code&gt;J1&lt;/code&gt; in our naming scheme) then you're
&lt;code&gt;J1&lt;/code&gt; in the enum. Technically you can have more than 2 joysticks on a system but I don't need more than 2 and I don't feel like copy pastaing all that 
configuration for 16 controllers or whatever it is.&lt;/p&gt;
&lt;p&gt;Next is the &lt;code&gt;Button&lt;/code&gt; enum, this will give us an identifier to use later to pass to our &lt;code&gt;ButtonDown&lt;/code&gt; event delegate.
Since buttons don't have any analog input data (there's only 2 states for a button, pressed or not pressed) we only need to
attribute a name/id to a button, hence this enum.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;

public class InputController : MonoBehaviour
{
    public ControllerNumber Number;
    public InputMap InputMap;

    // Delegates
    public delegate void Stick(float horizontal, float vertical);
    public delegate void DPad(float horizontal, float vertical);
    public delegate void AnalogTrigger(float activation);
    public delegate void ButtonDown(Button button);

    // Events
    public event Stick OnLeftStick;
    public event Stick OnRightStick;
    public event AnalogTrigger OnLeftTrigger;
    public event AnalogTrigger OnRightTrigger;
    public event DPad OnDPad;
    public event ButtonDown OnButtonDown;

    // ...see below...

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start off we give each controller a number and an InputMap.
What comes next a very simple event listener pattern using builtin c# events and delegates.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;
What I have done is for each distinct event I feel a controller might have I've defined a delegate, which is
like the signature (function type) of a function.&lt;/p&gt;
&lt;p&gt;I then define the event as being one of these delegates. So in the example I have defined a &lt;code&gt;Stick&lt;/code&gt; delegate taking 2 floats and returning void,
which both the &lt;code&gt;OnLeftStick&lt;/code&gt; and &lt;code&gt;OnRightStick&lt;/code&gt; events use, this means any function with the same signature(type) as
the &lt;code&gt;Stick&lt;/code&gt; delegate definition can listen to the events &lt;code&gt;OnLeftStick&lt;/code&gt; or &lt;code&gt;OnRightStick&lt;/code&gt;. What this means is &lt;strong&gt;any&lt;/strong&gt; function that
takes 2 floats and returns void can listen on the &lt;code&gt;OnLeftStick&lt;/code&gt; or &lt;code&gt;OnRightStick&lt;/code&gt; event. This will make more sense hopefully
when we look at the InputListener behavior a little later on.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
public class InputController : MonoBehaviour
{
    // ...see above...

    void Start()
    {
        if(InputMap == null) {
            Debug.LogError(&amp;quot;You must set the InputMap attribute!&amp;quot;);
        }
    }

    void Update()
    {
        var name = Number.ToString();

        var LeftStickH = (
            (InputMap.LeftStick.Inversion.Horizontal ? -1 : 1)
            *
            Input.GetAxis($&amp;quot;{name}{InputMap.LeftStick.Horizontal}&amp;quot;)
        );
        var LeftStickV = (
            (InputMap.LeftStick.Inversion.Vertical ? -1 : 1)
            *
            Input.GetAxis($&amp;quot;{name}{InputMap.LeftStick.Vertical}&amp;quot;)
        );
        if (LeftStickH != 0 || LeftStickV != 0)
        {
            OnLeftStick?.Invoke(LeftStickH, LeftStickV);
        }
        // ... repeated for right stick, and depad axis ...
        var L2Analog = Input.GetAxis($&amp;quot;{name}{InputMap.L2Analog}&amp;quot;);
        if (L2Analog != 0) { OnLeftTrigger?.Invoke(L2Analog); }
        var R2Analog = Input.GetAxis($&amp;quot;{name}{InputMap.R2Analog}&amp;quot;);
        if (R2Analog != 0) { OnRightTrigger?.Invoke(R2Analog); }

        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonLeft}&amp;quot;)) {
            OnButtonDown?.Invoke(Button.ButtonLeft);
        }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonBottom}&amp;quot;)) {
            OnButtonDown?.Invoke(Button.ButtonBottom);
        }
        if (Input.GetButtonDown($&amp;quot;{name}{InputMap.ButtonRight}&amp;quot;)) {
            OnButtonDown?.Invoke(Button.ButtonRight);
        }
        // ... repeat for every single button ...
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sorry about that split line multiplication but I'm trying to be kind to people with small screens (me on a 13" MBP).&lt;/p&gt;
&lt;p&gt;So here you see we just go and check every input using our cool new scheme and invoke a corresponding event, any delegates listening
to that event will be called. Pretty sweet! But wait we still need our delegates that will listen to these events in our behavior.&lt;/p&gt;
&lt;p&gt;Let's see what that looks like right now.&lt;/p&gt;
&lt;h3 id="inputlistenercs"&gt;InputListener.cs&lt;/h3&gt;
&lt;p&gt;Before I show you, I want to emphasize that you don't &lt;strong&gt;need&lt;/strong&gt; this class, as long as you understand events in .NET you can just subscribe to the 
events in InputController behavior on your own time and at your own discretion. That said this base class provides a nice illustration of how
this can be done.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
public class InputListener : MonoBehaviour
{
    public InputController InputController;

    public virtual void Subscribe(InputController inputController)
    {
        inputController.OnLeftStick += OnLeftStick;
        inputController.OnRightStick += OnRightStick;
        inputController.OnLeftTrigger += OnLeftTrigger;
        inputController.OnRightTrigger += OnLeftTrigger;
        inputController.OnDPad += OnDPad;
        inputController.OnButtonDown += OnButtonDown;

    }

    public virtual void Unsubscribe(InputController inputController)
    {
        inputController.OnLeftStick -= OnLeftStick;
        inputController.OnRightStick -= OnRightStick;
        inputController.OnLeftTrigger -= OnLeftTrigger;
        inputController.OnRightTrigger -= OnLeftTrigger;
        inputController.OnDPad -= OnDPad;
        inputController.OnButtonDown -= OnButtonDown;
    }

    public virtual void OnLeftStick(float horizontal, float vertical) { }
    public virtual void OnRightStick(float horizontal, float vertical) { }
    public virtual void OnLeftTrigger(float activation) { }
    public virtual void OnRightTrigger(float activation) { }
    public virtual void OnDPad(float horizontal, float vertical) { }
    public virtual void OnButtonDown(Button button) { }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see all this class does is define empty virtual functions for all the InputController events and provides a convenience member attribute
for an InputController and a function to subscribe to it. It's nothing to complicated and you can totally forgo using this class if you understand .NET events.&lt;/p&gt;
&lt;h3 id="examplebehavior-cameracontroller"&gt;ExampleBehavior: CameraController&lt;/h3&gt;
&lt;p&gt;Lastly before we finish up let's take a quick look at an example behavior that uses the &lt;code&gt;InputListener&lt;/code&gt; class to implement a player controller.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;
// simple sphereical coordinate vector to make going back
// and forth between sphereical and cartesian coordinates easier
[System.Serializable]
public class SVector3 {
    public float radius;
    public float theta; 
    public float phi;
    public float r { get { return radius; } set { radius = value; } }
    public float t { get { return theta; } set { theta = value; } }
    public float p { get { return phi; } set { phi = value; } }

    public SVector3(float r, float t, float p) { this.radius = r; this.theta = t; this.phi = p;}

    public Vector3 ToVector3(Vector3? center = null) {
        var c = center.HasValue ? center.Value : Vector3.zero;
        var x = c.x + radius * Mathf.Sin(theta) * Mathf.Sin(phi);
        var y = c.y + radius * Mathf.Cos(theta);
        var z = c.z + radius * Mathf.Sin(theta) * Mathf.Cos(phi);
        return new Vector3(x, y, z);
    }

    public static SVector3 FromVector3(Vector3 input, Vector3? center = null) {
        var c = center.HasValue ? center.Value : Vector3.zero;
        var r = (input - c).magnitude;
        var t = Mathf.Acos((input.y - c.y) / r);
        var p = Mathf.Acos((input.z - c.z)/(r * Mathf.Sin(t)));
        return new SVector3(r, t, p);
    }
}


// rotates the camera around a Target gameobject using the Right Joystick
public class CameraController : InputListener
{
    [Range(0.5f, 5)]
    public float RotationSpeed = 2;
    [Range(0.1f, 1)]
    public float ZoomSpeed = 0.1f;
    [Range(0.1f, 1)]
    public GameObject Target;
    public SVector3 Offset;
    public float MinOffsetRadius = 10;
    public float MaxOffsetRadius = 10;

    private Vector3 smoothingVelocity;
    private const float halfPI = Mathf.PI / 2; // cached fractions of pi
    private const float twoPI = Mathf.PI * 2;  // cached fractions of pi

    void Start ()
    {
        // assert that the InputController has been set with inspector
        Debug.Assert(InputController != null);
        // subscribe to the InputController
        Subscribe(InputController);
    }

    public override void OnRightStick(float horizontal, float vertical)
    {
        // Do a little math to rotate around the target
        var moveTheta = -vertical * RotationSpeed * Time.deltaTime;
        var movePhi = -horizontal * RotationSpeed * Time.deltaTime;
        var offset = Offset;
        var newTheta = offset.t + moveTheta;
        if(offset.t &amp;gt; 0 &amp;amp;&amp;amp; newTheta &amp;lt; 0) {
            Offset.t = Mathf.Clamp(newTheta, 0, halfPI);
        } else {
            Offset.t = Mathf.Clamp(newTheta, -halfPI, 0);
        }
        var newPhi = offset.p + movePhi;
        if(Mathf.Abs(newPhi) &amp;gt; twoPI){
            newPhi = newPhi - Mathf.Sign(newPhi) * twoPI;
        }
        Offset.p = newPhi;
    }

    void LateUpdate() {
        // look at the target
        var targetPosition = Offset.ToVector3(Target.transform.position);
        transform.position = targetPosition;
        transform.LookAt(Target.transform.position);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wouldn't read the code to closely as I lazily cobbled it together from my real code and didn't bother to make sure I didn't make any glaring errors.
But you should be able to tell from the code that it makes use of the input controller event system to spin the camera when a &lt;code&gt;OnRightStick&lt;/code&gt; event occurs.
Pretty sweet!&lt;/p&gt;
&lt;h3 id="wrap-up-and-thoughts"&gt;Wrap up and thoughts&lt;/h3&gt;
&lt;p&gt;So that's it. If you followed along and I didn't miss anything then you should have something very similar to what I am currently using
for input configuration in Unity. It's not a bad scheme and I think it's pretty darn simple.&lt;/p&gt;
&lt;p&gt;That said, I started this post over a month ago and then basically abandoned it in my &lt;code&gt;_drafts&lt;/code&gt; directory because I go busy with moving.
I'm just now coming back and finishing it. So there are probably some continuity issues in here.
At the time that I started I was excited to have quickly and relativily easily written such a decent and simple input configuration scheme.
Now that I come back to it, I'd like it be a separate package, and I can forsee some headaches and limitations. For example I already know it's
going to be annoying have to make an &lt;code&gt;InputMap&lt;/code&gt; SO for every platform and controller and it's totally cumbersome to have to switch the configuration manually.
But it's also probably a good thing that my simple system doesn't make an assumptions and just breaks if the set up is wrong. Trade offs I guess...&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the write up. I hope it made sense and that you got something out of it. Happy hacking homes!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;While I was fact checking some stuff to write this post, I learned about a new unity package the &lt;a href="https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0/manual/index.html"&gt;"Input System"&lt;/a&gt; that is supposed to serve as a replacement for the "old" style &lt;code&gt;UnityEngine.Input&lt;/code&gt; class... I did not know about this before I wrote all this code... (learning!)&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;The Joysticks are numbered 1-16, this means you can have maximum 16 joysticks on one system. Similarly the the axes are numbered 0-27 (for whatever reason the UI for the input settings has them X-Axis, Y-Axis, 1, 2, ... 28. But if you look at the underlying serialization file (&lt;code&gt;InputManager.asset&lt;/code&gt;) the axes are 0 indexed (they start at 0 and go to N-1).). Lastly unity has cryptically set the maximum number of joystick(controller) buttons to 20, starting 0 and accessed by setting the "Positive Button" setting to "joystick button %b" where again %b is the joystick number in zero indexed fashion.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;You will probably have 2 axes that output &lt;code&gt;-1&lt;/code&gt; every single frame, this is almost certainly L2 and R2. Most controllers have their L2 and R2 configured on 2 inputs, one emitting an analog signal which varies by the amount the button is depressed, the other a digital signal that is active only when the button is completely depressed (bottomed out).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;I've mentioned this a couple of times now, but these configurations vary a lot. For example my Dual Shock 4 needs to be configured differently for wireless mode and wired mode, it also needs to be configured differently for different operating systems. I use a windows machine for most of my development purposes, but I often use my macbook for these write ups so I have to have different configurations for each OS and wireless and wired mode. It's crazy.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;I've never read &lt;strong&gt;one&lt;/strong&gt; article or blog that I thought "Wow, what a succinct description of delegates and events in C#". So I'm not going to link anything like that unfortunately. However I find that when trying to understand something about C# the best place to start is on the microsoft developer docs.&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/delegates-overview"&gt;here is the developer docs for delegates&amp;amp;events&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate></item><item><title>Flawed. Better than perfect</title><link>https://owenstranathan.com/2022/01/26/flawed-better-than-perfect.html</link><description>&lt;p&gt;It's hard to do things you've never done before. In essence it's a form of pure improvisation.
Every action you take when you're doing the new thing is just the best course you can come up with based solely on just
the limited information your senses are bringing in. That may sound like a description of doing anything but it's not.
When you do anything it's true that you improvise action based on your reasoning about the information brought in by
your senses. But for most things you do, you have the benefit of having done them &lt;strong&gt;many&lt;/strong&gt; times before.
So in addition to all this sense data, you also have a large bank of recalled information to draw from.
Memories of the former you doing this same thing previously. How did it go last time? What did I do then? What went
wrong? You're at a great advantage in this case.&lt;/p&gt;
&lt;p&gt;There is such a powerful difference between doing a thing you've done before and doing a thing you've never done that
you can actually &lt;strong&gt;feel&lt;/strong&gt; it. And it feels terrible.  When you approach a new and unfamiliar task what do you feel?
Physically you may notice a pitting sensation in your stomach and your hands might start to sweat. Is this a life and
death situation? Maybe, but chances are good that it is not for most people. But still your nervous system reacts with a
similar intensity.  In a life and death situation you'd probably get a big shot of adrenaline which might help you
through the discomfort of all those other things. But for mundane new tasks, like using a table saw for the first time,
or framing a wall or submitting code to a large codebase you're still pretty unfamiliar with, you &lt;strong&gt;don't&lt;/strong&gt; get the
adrenaline but you &lt;strong&gt;do&lt;/strong&gt; get the discomfort. If you push through this physical discomfort eventually your nerves will
calm and you'll feel fine. But you have to break through it to feel that, and the second time you won't feel the
physical discomfort as much.&lt;/p&gt;
&lt;p&gt;The natural aversion to a new task is not just physical. Suppose you're building a house for the first time or you're
trying to write your first piece of large software, or a book or a song. You may find it mentally difficult to get
started most days. You may sit down at your kitchen table with a coffee and make a plan for exactly what you're going to
do to work on your project and then keep making that plan, then revise the plan, then make another pot of coffee, then
finally just decide to write a blog post about all this friction you're feeling toward the work you want to do.  That's
pretty normal. Steven Pressfield wrote a whole book about overcoming this phenomenon called "The War of Art" which I
encourage you to read.  Essentially his solution is to just bear down and push yourself toward the work or task,
consistently and (as he puts it) "professionally" and have "faith" in the power of "angels" or "the muse" to deliver you
to a divine result.  I think he's right but am less inclined toward his mythical imagery.&lt;/p&gt;
&lt;p&gt;I want to identify another interesting aspect of this phenomenon. A mental trick you can play on yourself that's so
subtle that you may not notice it at first. Supposing you're taking Pressfield's advise and you're attacking your work
"like a professional". You set a time that you must begin, 8:00 am say. Then you set a schedule of Monday through Friday
to work. So everyday Monday through Friday beginning at 8 am you sit down and you get to work. But do you really work?
If you're writing a book are you typing words? If you're writing software are you revising, scrutinizing and or
debugging code? If you're building a house, are you cutting and fasting wood and other materials together into the shape
of a house? If you're not doing those things then you're &lt;strong&gt;not&lt;/strong&gt; working.&lt;/p&gt;
&lt;p&gt;"But I'm going to do that, I'm just planning right now, I can't do the work without a plan." You say. True enough, but
then you must be honest with yourself and say "I'm planning" not "I'm working" and feel the consequences of that small
difference in self talk. It won't feel good. You won't feel quite like you accomplished anything, whereas if you lie and
say "I'm working" when really you're &lt;strong&gt;planning&lt;/strong&gt; or &lt;strong&gt;studying&lt;/strong&gt; then you might be able to fool yourself into short
term self satisfaction.&lt;/p&gt;
&lt;p&gt;It's important to identify what this is, this is the same thing that Pressfield calls "Resistance" creeping up to
prevent you from working. Pressfield personifies resistance as some other-worldly demon that stands in opposition to the
holy angels of creativity, the muses. I find it a lot more productive to identify it as an extension of the physical
resistance I characterized above. It's not something divine that requires divine intervention to overcome. It's
a mental resistance that at the level of brain chemistry and neurology is physical in nature as well.  We just feel
changes in our brain differently than changes in our body. For example when something threatens you, it may make you
either angry or scared. That doesn't feel like anything physically. It's just emotion. When something surprises you
playfully you laugh and you think it's funny, that's not a physical sensation either, that's emotional. And it feels
different in that it doesn't &lt;strong&gt;feel&lt;/strong&gt; like anything at all, it's just your reality changing because your brain doesn't
feel itself. You and your whole reality is just whatever your brain is "feeling" (emotionally) right now all the time.
But it &lt;strong&gt;is real&lt;/strong&gt; and it &lt;strong&gt;is fleeting&lt;/strong&gt; just like the physical symptoms we identified above.&lt;/p&gt;
&lt;p&gt;So back to resistance. When you encounter a new challenge and you feel the physical resistance, the nervousness, sweaty
palms, increased heart rate, pitting stomach. You know you can push through. When you get the mental resistance, it's
much harder to push through because your whole reality is based around your mental state, it's not a simple task to
think 2 things at once. To think "I've never done this I better figure out how before I do" and to simultaneously think
"I've never done this and if I do it now then next time I'll have a better idea how to do it so I better get busy doing
it". This is why I think Pressfield is inclined to invoke the idea of "faith" it's a powerful idea that's well suited to
this problem. To have &lt;em&gt;faith&lt;/em&gt; is to have a strong belief in someone or something. That's the dictionary definition. I
would add to that definition that for it to be "faith", that which you are believing in must also be &lt;strong&gt;unproven&lt;/strong&gt;. This
is important because if you &lt;em&gt;believe&lt;/em&gt; in gravity, that is not faith. If you &lt;em&gt;believe&lt;/em&gt; that when you touch fire you will
get burned, that too is not &lt;em&gt;faith&lt;/em&gt;. Faith must be centered around something unproven and unprovable. Such as faith in
God. To know that you've never done a thing before, and to not know all the things that will happen and to push on and
do it anyway believing that you will succeed. That is obviously faith.  What is not obvious is that the other option; to
say "I've not done this and I better learn before I try" is also faith, but it's faith in your ability to learn a
priori, faith in whoever or whatever you're using to educate yourself.  And most destructively it's deferring the work.
It's a rejection of life and experience. You're saying to yourself, "I have faith not in my life and my experience and
my intelligence, but I have faith in that which some one else has done, and has experienced. I have faith in my
teacher's intelligence and I will lean on them and their life rather than live my own." And what is worse is that this
other option is not even an option. When you've finished being taught then eventually it comes time for you to do this
new thing yourself. And after all the time and energy you put into "learning" you're &lt;strong&gt;still right back where you
started&lt;/strong&gt; doing this new thing for the first time without any previous experience to draw from and a choice to either
have faith or to balk and keep thinking about it.  So ultimately when approaching something new you have a choice.
Either you do it, or you just think about doing it. Only the former will teach how it's done.  It's important to have
"faith" in life.  The alternative is not really an option anyway.&lt;/p&gt;
&lt;p&gt;I want to talk about one final thing. That of results. We've identified that the only way to learn anything is to go
and do it. But it's important to recognize that even when we have "faith" this will still be a painful process.
Viz. it's going to suck the first time. You'll make mistake after mistake. It will be costly, and frustrating.
The end result will be flawed and imperfect. But you must identify that this flawed and imperfect result is so much
better than perfect. It's the best possible result and more importantly it's &lt;strong&gt;real&lt;/strong&gt; and not imagined.
There is a relation here to the topics of making in opposition to buying that I want to explore more in the future but
for the sake of time I'll defer that.&lt;/p&gt;
&lt;p&gt;If you had a perfect result the first time you do something then you probably had a very dull time experiencing that
work which produced the result. It's hard to talk about this in abstract terms so let's use another example.  Suppose
you're baking a cake for the very first time.  You have all your ingredients which cost money and are thus precious in
this way. And you have your recipe so you know at least conceptually what you need to do to make a cake. And you put all
the ingredients together and you make the batter and you put the batter in a pan and the pan in the oven and some time
later you take it out at the exact right time and it's a perfect cake. This cake is &lt;strong&gt;as good as you can possibly make
it&lt;/strong&gt; using the ingredients and equipment available and nothing surprising happens and you didn't learn anything from the
experience. That's sounds awful, what a boring thing to have spent time doing. Suppose instead you want to make a cake
and you don't have a recipe, you just have some ingredients that you think perhaps might make a cake and a notion of how
to combine them. Now you're really doing something, you combine the four and sugar and you add the eggs and you taste is
and it's a bit dry so you reach for some milk when you think "What if I use cream instead" so you add cream and you
taste it and you think that's better but the flavor is boring. So you look around for something to add but you don't
have any cocoa or vanilla but you do have nutmeg and orange zest so you add those, unsure of how it will taste. Then
just before you put it in the pan inspiration strikes and you think "Walnuts might be great in this cake" so you add
some crushed walnuts and you bake it at a temperature that you believe might be the right temp for some length of time
based on feedback from the cake as you check it repeatedly while it's baking. Then after it's "done" (or what you think
might be done) you take it out and you let it cool and later you taste it and... It's a little dry, and it's not quite
sweet enough but the orange and nutmeg and walnut is a very tasty flavor and the cream added a satisfying richness that
you've not tasted in a cake before.&lt;/p&gt;
&lt;p&gt;Wow! What an experience! So many new things and even a chance at creativity. And now you know that you need more milk
the next time and more sugar. You also learned that you like the addition of cream and the taste combo of orange and
nutmeg. Your flawed and imperfect cake is better than the perfect cake from a recipe, and you're more inclined to make
it again because you're curious about your ideas to improve it. You invested your time and your precious resources in an
act of faith and you emerged with a mediocre cake and a wealth of knowledge about how to not make a cake.  In the former
perfect recipe example you invested just as much (you put faith in the recipe) and all you got was a perfect cake.
So flawed is better than perfect. Flaws teach.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Spotting Fake GBA Carts</title><link>https://owenstranathan.com/2019/09/17/spotting-fake-gba-carts.html</link><description>&lt;p&gt;A few months back I bought an &lt;a href=""&gt;Advanced Wars&lt;/a&gt; cartridge for my wicked sweet modded GameBoy Advanced on ebay,
but when I got it turned out to be a fake!
I was really ticked about it, so I made some PSA graphics to post in imgur and reddit.&lt;/p&gt;
&lt;p&gt;I'm putting them up here as well, because I can and I want to.&lt;/p&gt;
&lt;h1 id="how-to-spot-a-fake-gba-cartrige"&gt;How to spot a fake GBA cartrige!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/3RIp0ap.jpg" width="100%" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/seUU09g.jpg" width="100%" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/73K3sV8.jpg" width="100%" /&gt;&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate></item><item><title>One Month of Carnivore: A Retrospective</title><link>https://owenstranathan.com/2022/02/01/one-month-of-carnivore-a-retrospective.html</link><description>&lt;p&gt;As I may have mentioned in earlier posts; this January I did the carnivore diet for the whole month.  I want to
take a moment to reflect on the diet and its results.  The month of carnivore did exactly what I knew it would do. I
lost 20 lbs. half of that probably being water weight and I felt clear and clean for much of the month. I've done this
diet in the past and there are many aspects of it that I like, some that I don't like and some that I both like and
dislike. Here I will list just a few.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Clear headedness/stable energy levels&lt;/strong&gt; - When you eat a carnivore diet you are also eating a semi-ketogenic diet
   in that you have completely eliminated carbs. So after you acclimate to the change in energy source (ketones over
glycogen) a nice benefit is that you have a clean stable energy level that doesn't spike or drop throughout the day and
your mind is less distracted and flitting and more directed (unless you go drink a bunch of caffeine which I did most
days to help me tackle my morning runs).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A general disinterest in or apathy toward food&lt;/strong&gt; - This is caused by 2 things I think. The first cause is the same
   as above, you're in ketosis and so your body isn't really ever without energy because it can just tap into body fat
whenever it needs. The only time you feel hunger is when your stomach is empty and your vagus nerve starts complaining.
The form of hunger more common in a diet featuring carbs is hormonal hunger caused as a reaction to drops in blood
sugar. This kind of hunger is what makes you fantasize about lunch at 10:30 and it doesn't really happen all that often
on a ketogenic diet because your blood sugar levels stay pretty even. The second reason is because when you only eat
meat your meals become pretty monotonous. If you don't feel hungry the prospect of eating more meat is not very
exciting. The brain doesn't crave more fat or protein when it's satisfied because fat alone doesn't trigger an outsized
dopamine response. It's sugar that gives you that drug-like hit of dopamine that keeps you reaching for the snacks even
though you're quite full. I both like and dislike this aspect of the diet because while it simplifies my interaction
with food it also shortens and de-emphasises them which can negatively impact social interactions, particularly with my
wife who deeply loves eating and meal times.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A decrease in stamina&lt;/strong&gt; - Again related the fact that a carnivore diet relies on ketones and not glycogen. So long
   as you're exerting yourself at a low intensity (aerobically) you can go for a long time because you have all the
energy you need in the form of body fat. But if you want to work just a little harder or a lot harder (anaerobically)
then you don't have a lot of gas and you get tired quickly and need more rest than normal. This negatively impacts work
outs, specifically strength training and high intensity cardio sessions like sprints or fast runs. You can overcome this
problem while remaining carnivore with things like milk and honey (though some purists may argue the use of dairy, my
thinking is if it comes from a cow then it's carnivore) to give you carbs before and after a hard workout. The only
problem being that you will fall out of ketosis and thus experience the unpleasantness of re-entering once the sugar
runs out. Viz.  you will feel hormonal hunger and all that comes with it to varying degrees (irritability, headaches,
etc). I didn't not indulge in honey and only used milk very sparingly this month simply because I wanted to maximize my
fat loss and so did not want to exit ketosis if I could help it. This little problem is the main reason I won't continue
carnivore as it's pretty limiting to me in terms of workouts. That and I miss fruit and vegetables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carnivore isn't really keto&lt;/strong&gt; - I know this contradicts what I said earlier but not really. I said that carnivore
   is semi-ketogenic, and so it is. It could be fully ketogenic if you are so inclined but a true keto diet is very
difficult to sustain. A true keto diet is any diet that keeps your body in ketosis (generating and using ketones for
energy instead of glycogen). To do this on carnivore, particularly if you are a pretty lean person, could be difficult
since you may not have a lot of extra body fat to tap in to so you may need to eat &lt;strong&gt;lots and lots&lt;/strong&gt; of external fat to
keep your keto engine humming. This is easy if all you eat is 80/20 ground beef and grain finished ribeye, but that's
not a good idea for reasons outside the scope of this post. So you may find yourself do things like drinking butter,
heavy cream, beef tallow or bacon grease to get the requisite fat to stay keto. This can be unpleasant and difficult to
measure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Great digestion&lt;/strong&gt; - If you start carnivore today and keep going for a couple days you'll think I'm a liar on day 2
   when you have your first bout with the diarrhea and or constipation that comes with transitioning to a high fat zero
carb diet. But after the first week or so your body acclimates and your bowels become a total non issue. I mean as low
maintenance as you can get. Occasional (every other day maybe) firm healthy movements with no gas. Gas in particular is
an issue for me and on carnivore I'm virtually fartless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hugely simplified grocery shopping&lt;/strong&gt; - Most grocery stores in the US are laid out the same. You enter into the
   produce section one side of the building, the butcher and deli are in the back on the periphery. The center is a sea
of dry goods and processed foods. The dairy and beverages are on the opposite side of the building from the produce. The
bakery is usually in the back on the same side as the produce. I don't know why they're all so similar but when you eat
carnivore and you go to the store you can skip 90% of it and go to the butcher, then the dairy and then leave. Or if you
live a place with strong local food business you can skip the store entirely and buy your meat from the local butcher
shop. Or if you're in a rural setting like me you can do what I did for much of the month and buy your meat, milk and
eggs directly from a local farm. And get your more processed items like bacon from the butcher.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A less wasteful plate&lt;/strong&gt; - When you eat carnivore you may start out being a bit spoiled and eating only the choice
   cuts you know you like. But you can't survive on chicken tenders and soon enough you'll start feeling crappy. It's
amazing how nourishing the nasty bits on an animal can be. When you start to feel weak and tired and let's face it a
little starved from just eating lean muscle and fat all the time. Have a slice of liver fried in butter, or a chunk of
braised heart. You'll instantly feel more alive, and it'll probably taste better to you than it ever has before. Even if
you "Don't like" the offal. Give it another try on carnivore when your body is starved the nutrients it used to get from
fortified processed foods. When you need it your brain will make it taste good. This translates to a less wasteful use
of the animal because you end up eating &lt;strong&gt;all&lt;/strong&gt; of it. Even the bones. This is definitely a good thing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are probably more aspects of interest regarding a carnivore diet but I think I've enumerated enough for now.
All in all I think carnivore is a great short term diet to educate you about how your body processes food, the
difference between what it needs and what it wants and the food system that supports you in your everyday life.
I'm not convinced it can be followed long term for optimal health but there are definitely proponents with a lot more
data, research and experience than me who believe that you can. Specifically Paul Saladino author of the carnivore code
presents a emphatic argument &lt;strong&gt;for&lt;/strong&gt; long term carnivore eating. I've also heard of famous internet personalities with
auto-immune disorders and problems having good outcomes with carnivore. Assessing those claims is outside my ability and
interest as I have no auto-immune disorders and I don't care that much about those famous people.&lt;/p&gt;
&lt;p&gt;I like to eat carnivore periodically and for health and educational benefits. Perhaps you might like to try it, I
encourage you to do so. If you do, try to source your meat responsibly. That to me means a few things in a specific
order from most important to least important:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Humanely raised&lt;/strong&gt; - Factory farming is evil and wrong. This one is a tough one. The &lt;strong&gt;best&lt;/strong&gt; way to ensure your
   food is humanely raised is to have a relationship to the food before it's slaughtered. i.e. knowing where and how the
animals are raised and cared for by developing a relationship with the farmer. But that's not a viable option for many
people. The second best way is to do some research and find a certifying body that you feel you can trust to adequately
certify that a given food is humanely cared for and then only shop their label. I will say that if I can't get eggs from
the farmer or bacon from the butcher I will buy from the grocery in which case I look for the "Certified Humane" label
on eggs and meat. But you should do your own research and figure something out that works for you. Those humane
certifications usually come with an increase in price, a powerful statement on the sick state of our society that basic
decency can be had but only at a premium and the default is evil and cruelty. If you really cannot afford to get humane
meat then you must make a choice for yourself based on what your priorities are and consider all the options. Is eating
highly processed soy and cereal grains grown in devastating large scale mono crop agricultures better than factory
farming? I don't think so, but that doesn't make factory farming ok, both are wrong but in different ways.  You must
decide what you can live with and what you cannot. Perhaps you might buy more expensive food and eat less?  Maybe such
an alteration will change your outlook and drive you to have a more direct relationship with the source and production
of the food that sustains you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local&lt;/strong&gt; - I'm talking like in the same town or county. Getting locally raised meat is important as it contributes
   directly to farmers in your area and allows you have a more direct relationship with the life and death of your food.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grass fed/finished&lt;/strong&gt; - Grain fed animals have less nutritious meat and more fat. You are what you eat after all and
   if your cow or lamb only eats corn then its meat will be less nutritious than one that eats pasture legume grasses
it's whole life. &lt;strong&gt;Dont be fooled&lt;/strong&gt; by labels at the grocery that just say "Grass fed", with beef at least this is
misleading because almost all beef is grass fed on pasture for the first part of it's life. The difference comes when
the cow is approaching it's slaughter weight how it's "finished". A grass finished beef's diet is not changed and the
farmer continues to feed the cow grass. A grain finished beef is fed grains (usually corn in the US) to fatten it up and
make nice decadent fat-marbled steaks and roasts. This comes at the opportunity cost of all the nutrients the animal
would have gotten from the grass, nutrients only the beef and other ruminants can unlock for us since we lack a rumen to
digest the grass.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organic&lt;/strong&gt; - A last ditch effort to get high quality humanely raised nutritious meat is to just look for the organic
   label. Yes it's more expensive and while the USDA, despite being bureaucratic authoritarians, make no guarantees
about the quality of life offered to an organically raised animal; chances are good that if the farmer is foregoing
easier methods of farming to raise organic meat then they might also be inclined to simply care for their animals more.
If only because not doing so will make it harder for them down the road without hormones and antibiotics at their
infinite disposal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skip it&lt;/strong&gt; - I talk a lot about beef because it's the main animal I eat. But there are a lot of animals you can eat.
   It doesn't have to be beef. If you can't find grass finished organic humanely raised beef in your area at a price you
can afford then look for something else. Maybe you can afford humanely raised organic eggs. You can go a long way just
eating eggs and dairy. Be creative and don't limit yourself. Look for less conventional meats like rabbit, mutton or
goat. Find a solution that works for you in your area. If the thing you thought you could get turns out to not be viable
you can always just skip it and look for something else or eat a more limited diet. Chances are if your reading this
then you're not starving and could stand to have a little self imposed limitation to your diet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think now that I've rambled long enough so I better wrap this up.
Today is the first day of February and so my month of carnivore is over, but it's brought me closer to my food and made
me a slightly more thoughtful and appreciative eater of plants and animals. I hope my experience has been valuable to
you, it certain was to me.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Beginner's Mind: Relearning Vim</title><link>https://owenstranathan.com/2020/04/11/relearning-vi.html</link><description>&lt;p&gt;&lt;a href="#the-point"&gt;Get to the point&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="vim-is-great"&gt;Vim is great&lt;/h1&gt;
&lt;p&gt;I use Vim every single day. It's my daily driver text editor, and I definitely have Vim "in my fingers".
So much do I prefer the ergonomic interface of Vim that I even built a custom keyboard to allow me to remap
things like arrow keys and page down to the corresponding Vim keys and (sort of) use Vim everywhere.&lt;/p&gt;
&lt;p&gt;That said. I don't actually know that much about Vim. Obviously I know enough to be productive and to
prefer Vim over all other editors, but occasionally I will be doing a repetitive edit operation over
and over and think to myself, there must be something in Vim to make this faster and easier.
So I'll saunter on over to my browser and open up google and type "How to do X in Vim" and then read
a bunch of blogs and SO articles and eventually come out knowing something more about how to use Vim.
This has served me well and has helped me to cement the &lt;em&gt;most useful&lt;/em&gt; features of Vim into my muscle memory.
The problem with this approach is that a lot of things are super super useful in Vim, but their use cases are not frequent,
and maybe even not obvious. This makes for a certain subset of Vim commands and features that I have to constantly
relearn and lookup in order to use effectively, and a larger subset of commands and features that I don't even know about but perhaps maybe I should.&lt;/p&gt;
&lt;h1 id="vimtutor"&gt;Vimtutor&lt;/h1&gt;
&lt;p&gt;If you've ever tried to learn Vim before, or thought about learning Vim before, you've probably been told to use Vimtutor&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
If you're like me you opened Vimtutor, did the first couple of exercises, got impatient and either quit, or like me just used Vim anyway
and looked up everything you wanted to know when you wanted to know it. I like my way. It's a trial by fire and it's
how I do most things. I think it helped to get Vim in my fingers more quickly because I was using Vim immediately in a real world editing
context and I learned the commands and the features because I had to or else suffer productivity losses.
One of the short comings of my "throw away the instructions and just get busy" style is that I only learn about the things I think
I want to be able to do, which leaves an opening for things I would want to do if I knew about them, to slip and leave me inefficiently
working in ignorance.&lt;/p&gt;
&lt;p&gt;So to rectify this I decided to spend this Saturday reading 2 documents.
The first obviously is Vimtutor, and the second is Learn Vimscript the Hardway, by Steve Losh.
When reading vimtutor I was shocked at the number of simple commands I had either overlooked or
neglected to become proficient with. I'm very excited to learn these things and hopefully experience a
boost in productivity and efficiency as a result. But the short comings of reading only as a form of learning have not
changed. And so in an attempt to try and improve my retention I've decided to write down all the things I didn't already know
that I've learned from vimtutor today.&lt;/p&gt;
&lt;h1 id="the-point"&gt;The Point&lt;/h1&gt;
&lt;h4 id="stuff-i-learned-from-vimtutor-that-i-didnt-know-before"&gt;Stuff I Learned From Vimtutor, that I Didn't Know Before&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Undo all the changes on a line with &lt;code&gt;U&lt;/code&gt;. (Vimtutor 2.7)&lt;/li&gt;
&lt;li&gt;Type  &lt;code&gt;rx&lt;/code&gt;  to replace the character at the cursor with  &lt;code&gt;x&lt;/code&gt;. (Vimtutor 3.2)&lt;/li&gt;
&lt;li&gt;To change until the end of a word, type  &lt;code&gt;ce&lt;/code&gt;. (Vimtutor 3.3)&lt;/li&gt;
&lt;li&gt;The change operator is used with the same motions as delete i.e. &lt;code&gt;c$&lt;/code&gt;, &lt;code&gt;c2w&lt;/code&gt;, etc. (Vimtutor 3.4)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;CTRL-G&lt;/code&gt; to show your location in the file and the file status.
    Type  &lt;code&gt;G&lt;/code&gt;  to move to a line in the file.   (Vimtutor 4.1)&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Type  &lt;code&gt;%&lt;/code&gt;  to find a matching ),], or }. (Vimtutor 4.3)&lt;/li&gt;
&lt;li&gt;Type  &lt;code&gt;:%s/old/new/gc&lt;/code&gt;  to find every occurrence in the whole file, with a prompt whether to substitute or not. (Vimtutor 4.4)&lt;/li&gt;
&lt;li&gt;To save part of the file, type  &lt;code&gt;v  motion  :w FILENAME&lt;/code&gt; (Vimtutor 5.3)&lt;/li&gt;
&lt;li&gt;To insert the contents of a file, type  &lt;code&gt;:r FILENAME&lt;/code&gt; (this can also insert output from external commands i.e. &lt;code&gt;:r !ls&lt;/code&gt;) (Vimtutor 5.4)&lt;/li&gt;
&lt;li&gt;Type  &lt;code&gt;a&lt;/code&gt;  to insert text AFTER the cursor. (Vimtutor 6.2) &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Type a capital  &lt;code&gt;R&lt;/code&gt;  to replace more than one character. (Vimtutor 6.3) &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;:set ic&lt;/code&gt; to ignore case in search. Use &lt;code&gt;/search\c&lt;/code&gt; to ignore case for just that search. (Vimtutor 6.5)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you look at the Vimtutor lesson numbers you can pretty much see where I gave up the last time I used Vimtutor, it was in lesson 2.
I learned something from each lesson after that, so even for me a fairly well seasoned Vim user, I learned a lot from Vimtutor, this is probably
more to do with the fact that I've not spent a lot of time sitting down and just learning things about vim. It's a big beautiful tool, and there
is a lot to learn. If you've never done the Vimtutor, I highly recommend that you do.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For those who don't know, Vimtutor is a script that is included in &lt;em&gt;most&lt;/em&gt; Vim installs. It launches Vim on a copy of a file the text of which teaches you the basics of using vim. It's a pretty great thing, but it's definitely boring.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Usually I use &lt;code&gt;:#&lt;/code&gt; to jump to line &lt;code&gt;#&lt;/code&gt;, using &lt;code&gt;G&lt;/code&gt; is pretty much the same as far as speed and ergonomics.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I knew I could use &lt;code&gt;A&lt;/code&gt; to jump to the end of line in insert mode, but didn't know about &lt;code&gt;a&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This is replace mode. I knew about this, but I haven't internalized it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate></item><item><title>Practice</title><link>https://owenstranathan.com/2020/11/23/practice.html</link><description>&lt;p&gt;Lately I've been waking up at 5:30 am. I really love the practice of waking up early. But it's a difficult practice and it's taken me a long time to become consistent with it.&lt;/p&gt;
&lt;p&gt;Here are some of my tips for successfully waking up early everyday:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to bed early.&lt;/li&gt;
&lt;li&gt;Have something that must be addressed at the time you want to wake up.&lt;/li&gt;
&lt;li&gt;Practice everyday, without expectation and without disappointment.&lt;/li&gt;
&lt;li&gt;Just do it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my life a lot of the things I want to do are pretty difficult. This is just a fact of life and I've spent countless hours over the years trying to will my way passed
the difficulty of waking early, or exercising regularly, or practicing the piano everyday, or programming when I really don't even want to look at a computer.
But in recent months, especially since the pandemic hit, I've had time to slow down my racing thoughts and experiment with my routine and my practices.
I've learned a few things that help me a lot and I'd like to archive/share them here.&lt;/p&gt;
&lt;p&gt;To start here is a incomplete list of some of the things I have struggled to do regularly that I've been able to become more consistent with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Waking up early&lt;/li&gt;
&lt;li&gt;Going to bed early (this is almost as hard as the former)&lt;/li&gt;
&lt;li&gt;Cardio&lt;/li&gt;
&lt;li&gt;Strength training&lt;/li&gt;
&lt;li&gt;Focusing&lt;/li&gt;
&lt;li&gt;Journaling&lt;/li&gt;
&lt;li&gt;Doing chores (cleaning kitchen, laundry, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's healthy to remember that you'll never be finished and that whatever it is you've made, formulated or otherwise created can always be improved
(unless you've achieved some theoretical limit, in which case good job!).
I'm sure I'll find more ways to fine tune my practice and build stronger systems over time.
For now however I've got about 4 things that really help me in my various practices. I've written them above applied specifically to waking up early.
But here I've generalized them to any practice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Practice a complementary discipline.&lt;/li&gt;
&lt;li&gt;Leverage your environment to encourage your practice&lt;/li&gt;
&lt;li&gt;Practice everyday, without expectation and without disappointment.&lt;/li&gt;
&lt;li&gt;Just do it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will be helpful for me to elaborate on them a little further.&lt;/p&gt;
&lt;h3 id="practice-a-complementary-discipline"&gt;Practice a complementary discipline&lt;/h3&gt;
&lt;p&gt;When you practice a discipline it's very helpful to have a secondary practice that compliments the primary one. A complimentary practice is one that, in the act of doing it
the practitioner is actively encouraged, aided or otherwise assisted in practicing some other discipline. Examples of this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Going to bed early:&lt;/strong&gt;&lt;br /&gt;
    This one is kind of a no brainer, obviously if you go to bed early you'll be more capable of waking up early because you'll have gotten enough rest.
    Before recently I never thought about going to bed as a practice. For me the goal was always "Wake up early, so I can have more time to do the things I want to do".
    For me I wanted to start waking up at 5:30 AM. To do this I knew I needed to go to bed earlier, but how much earlier was always guess work. A big problem that I had was that I
    would always wake up to my alarm 8 hour after going to bed and I'd feel &lt;strong&gt;&lt;em&gt;extremely&lt;/em&gt;&lt;/strong&gt; tired.
    The solution for me came when I learned about sleep cycles &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.
    By sleeping 8 hours I was actually interrupting a sleep cycle right as I was slipping into the deeper stages when waking is more
    uncomfortable. So I decided that 7.5 hours (that's ~5 sleep cycles) was what I should be aiming for. So to wake up at 5:30 and get 7.5 hours of sleep I needed to
    go to bed by 22:00. And so my new complimentary practice has become going to bed at 21:30 - 22:00 every night.
    I treat this practice as being just as important as getting up at 5:30. Because when you think about it, it &lt;strong&gt;is&lt;/strong&gt; equally important, if I don't go to sleep on time
    how on earth can I wake up on time.
    So now this secondary practice of sleeping at 22:00 compliments my practice of waking up at 5:30 and my practice of waking at 5:30 compliments my practice of going to bed at 22:00
    (I'm usually pretty tired by 22:00).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Journaling&lt;/strong&gt;&lt;br /&gt;
    Journaling is a really fantastic practice because it compliments just about everything.
    Journaling provides a valuable means of accountability and a place to track both successes and failures. It can also provide motivation in the form of dependency.
    What I mean by that is the practice of logging your efforts and progress made in some practice in your journal is &lt;strong&gt;dependent&lt;/strong&gt; on performing that practice.&lt;br /&gt;
    For example if I write a task in my journal named "Workout" then I'm immediately motivated to do my workout for the satisfaction of completing my task list.
    Logging the data of each practice is a fun and easy way to keep on top of a practice. When you look at your log in your journal and see that today has no data
    for some practice, when every day prior has data then you might be more motivated to complete your practice that day so as not to miss out on filling in that blank. Your
    journaling practice in effect becomes dependent on your other practices, which are likely more important since a personal journal does not have much value to anyone but the
    person keeping it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="leverage-your-environment-to-encourage-your-practice"&gt;Leverage your environment to encourage your practice&lt;/h3&gt;
&lt;p&gt;The goal here is basically to "Set yourself up for success". So for example preparing your clothes for morning exercise the night before, or setting your alarm clock/phone on the
other side of the room from your bed so you have to get out of bed when it goes off, or establishing some obligation to perform your practice however small. All of these things
are external forces that can help you perform a given practice. Continuing with my example of getting up early I have several environmental factors I use to help me keep up this
practice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;I keep my phone on the other side of the room from my bed.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
     This has 2 effects:&lt;ol&gt;
&lt;li&gt;When I go to bed early, and especially when I'm not so tired, I can't endlessly scroll through noise online preventing my silly ape brain from derailing my practice.&lt;/li&gt;
&lt;li&gt;When the alarm rings at 5:30 am I have to stand up out of bed to turn it off (which I must do quickly lest I incure my wife's wrath)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;I have my alarm set to not allow snoozing.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
     This means if I turn off the alarm I know there will be no second chance, and I must decide right then and there if I'm commited to getting up.
     Usually taking a leak gives me enough time to think it over and make the right choice.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;I have set parental controls on my phone to block major news sites and social media&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
     This is one is more just generally helpful to any practice since news and social media are major wastes of time. But it does prevent me from mindlessly bringing my phone
     to bed and getting sucked into syndicated garbage.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Be creative and think about what things in your environment inhibit a practice and think about how those things can be flipped or nullified to encourage the practice instead.&lt;/p&gt;
&lt;h3 id="practice-everyday-without-expectations-and-without-disappointment"&gt;Practice everyday, without expectations and without disappointment&lt;/h3&gt;
&lt;p&gt;This is far and away the most important item on this list. And it takes some explaining.
To introduce the idea is a quote from &lt;ins&gt;&lt;strong&gt;Novice to Master: An Ongoing Lesson in the Extent of My Own Stupidity&lt;/strong&gt;&lt;/ins&gt; by &lt;strong&gt;Soko Morinaga&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All people regardless of how their lives are structured hold themselves dear. Everyone wants to be happy. And Enlightenment is the starting point of happiness.
We can use the words "true self-confidence" in place of "enlightenment." True self-confidence means confidence in the true self, and confidence in the true self is a necessary requisite
to happiness.&lt;/p&gt;
&lt;p&gt;The Power in which you can come to believe in yourself is not gained through training. It is the great power that transcends the self, that gives life to the self.
The purpose of Zen practice is to awaken to the original power of which you have lost sight, not to gain some sort of new power.
When you have sought and sought and finally exhausted all seeking, you become aware of that with which you have been, from the beginning - before ever beginning to search -
abundantly blessed. After you have ceaselessly knocked and knocked, you realize, as I have said, that the door was standing
wide open even before you ever started pounding away. That is what practice is all about.&lt;/p&gt;
&lt;p&gt;Not only in places especially set up for training, but anytime and anywhere, the person who exerts himself or herself with dignity,
without worrying about results and without giving in to disappointment, is a true practitioner, a true person of the Way.
I believe that &lt;strong&gt;just this&lt;/strong&gt; is the form of true human well-being&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially what this means is that the transformative power of practice comes from the act of consistently practicing.
No matter the circumstances, so long as you keep going, keep practicing then you're doing right.
An important part of consistently practicing regardless of conditions, is overcoming disappointment. If you allow yourself to become disappointed with the effect of your
practice you will always quit, maybe not today but eventually it will defeat you. You must say "no" to disappointment and take pleasure in the grind.
Similarly if you begin your practice with expectations of the result you will most often be let down and open the door for a tougher fight with disappointment.
Moreover setting expectations on the practice places limits on your performance. If you enter into practice with some expectation as to how well you will do or how much 
you can take you'll likely stop when you reach that predetermined point, without knowing just how far you could have gone.
You must begin with an empty mind and focus only on the act.&lt;/p&gt;
&lt;p&gt;As an example:&lt;/p&gt;
&lt;p&gt;As I stated at the beginning of this post I've begun many new practices in the last year. The biggest and most challenging has probably been fitness.
I've had fitness practices in the past and always I end up stopping at some point for one reason or another.
Previously when I trained I would do so with the expectation of being minimally capable, i.e. if last weak I ran an 8 minute mile then this week I should run at least an
8 minute mile if not faster.
This small expectation I had placed on myself was good in one sense that it forced me to push myself, and I'm certain that was what I thought at the time.
But it was ultimately detrimental to my practice for multiple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it increased my disappointment.&lt;br /&gt;
    Expecting to always improve or at least maintain, makes disappointment easy. Many days you just don't have the energy or the conditions just aren't favorable
    and you under perform. This is just a reality you have to accept.&lt;/li&gt;
&lt;li&gt;it produced a source of fear and loathing toward my practice.&lt;br /&gt;
    Expecting that I perform to some standard, even my own standard. Sets up fear of failure and disappointment. If one is afraid to practice he is already starting to fail.
    If one is afraid to practice he will come to hate his practice. Yoda said "Fear leads to anger, anger leads to hate, hate leads to suffering" true words.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These and other factors stemming from my expectation of a minimum capability would always and invariably lead me to quit, not just once but everyday, until eventually I was no longer
practicing at all.&lt;/p&gt;
&lt;p&gt;Instead of expecting that I always beat or tie my previous best instead I should always just focus on going that mile, however slow. The focus should not be how well I practice but just
the practice itself. This refocusing manifests itself as being present. When I'm out on my run or when I'm doing my strength routine my mind is wholly focused on each step, on each breath,
on every muscle engaged in my current effort.&lt;br /&gt;
If you're running center your thoughts on our breath, on your posture, think with each step of all the muscles engaged in
one single pursuit, to move your body through space.&lt;br /&gt;
If you're doing push ups or pull ups focus on the muscles engaged and the explosive breath and energy at the core of your being. Be right there focused and present just for
that action.&lt;br /&gt;
Being unenlightened I cannot say for certain, but this must be something approximately similar to enlightenment.&lt;/p&gt;
&lt;p&gt;Finally do your practice everyday, even if part of the practice is not practicing. This is important. A body cannot heal if it has no time to rest.
Be mindful of your practice. If today you don't workout because it is a rest day then do so with intention. Say "Today I rest, and I must do so with dedication to my fitness".
In this way you still practice fitness even though no exercise was performed.&lt;/p&gt;
&lt;h3 id="just-do-it"&gt;Just do it&lt;/h3&gt;
&lt;p&gt;Nike slogans aside, this is a powerful statement with a lot of meaning behind it. As Ronnie Coleman said "Ain't nothin' to it but to do it.".&lt;/p&gt;
&lt;p&gt;What this means is when you go to perform your practice just get on with it.
At anytime in history man has had plenty to distract him, and myriad methods to procrastinate.
Now especially we have even more distractions at our disposal.
It's easy to get bogged down in data and over think the problem. If your goal is to get up early, stop weighing if you've had enough sleep or not and just get up,
I promise you that before the day is over you'll know if you got enough sleep and you'll get a chance to change your sleep parameters again tonight.
If you want to run, then stop thinking so hard about your heart rate, or your shoes or your attire and just go outside and run. Afterwards you'll have a much clearer
picture of what worked well and what needs to change.
This is applicable to basically everything you can possibly do, it's maybe a bit more nuanced and has some caveats if your goal is say "build a bridge" but there are
ways to "just do it" there as well.&lt;/p&gt;
&lt;h3 id="thats-it"&gt;That's it&lt;/h3&gt;
&lt;p&gt;Ultimately the way you practice is down to you, and you should do what you think is best. The 4 methods listed above are the 4 major things I've learned and that I
keep telling myself over and over again to help me practice all that I do with enthusiasm and with consistency.
I hope this helps you in some way.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sleep_cycle#Length"&gt;Wikipedia: Sleep Cycles -- Length&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate></item><item><title>Middlemen</title><link>https://owenstranathan.com/2022/01/19/middlemen.html</link><description>&lt;p&gt;On Sunday my wife got up early and cleaned the whole house and made me breakfast, carnivore Eggs Benedict (that's just Eggs Benedict with egg whites where the English muffins usually are).
I have to say I rather enjoyed the pampering of that, while I read and programmed and messed about on my phone, all the morning chores, coffee, breakfast, tidy. Just
got done without my input.&lt;/p&gt;
&lt;p&gt;Suffice it to say that this is a rather unusual occurrence and was meant and taken as a special treat and early payment for a favor I'd not yet conferred but that I would be doing soon.
You see my wife had a plan for Sunday. This past Christmas my brother came to Vermont to visit us and my parents for the holidays. He came with his dog and a trunk full of gifts
carefully prepared by his more thoughtful half who stayed behind at their home, to stay focused on her work renovating houses (she's a tough chick).&lt;/p&gt;
&lt;p&gt;Among these many goodies nestled in my brother's Subaru was a vial of home grown Psilocybin mushrooms. These mushrooms where the gift prepared for my wife.
It was these mushrooms that were the object of her plans for this past Sunday, and the reason she spoiled me in the morning.&lt;/p&gt;
&lt;p&gt;You see she took &lt;em&gt;all&lt;/em&gt; of the mushrooms. 3.5 grams of communion with God.&lt;/p&gt;
&lt;p&gt;My task, among all the other things I'd planned for myself that day, was to keep an eye on her and help her if things started to go sideways (which they did but only for a few minutes before she crossed the threshold of her ego
and emerged from the other side reborn.)&lt;/p&gt;
&lt;p&gt;The details of her experience are her's to tell to whom she wishes and not mine to disclose.
Instead I'd like to ruminate on some of the topics we discussed that evening when the veil of the divine lifted from her senses and we sipped tea and read and conversed in dim light.&lt;/p&gt;
&lt;p&gt;In particular I'm taken by the idea that we called (for lack of a better term) "the middleman". Let me contextualize a little bit.&lt;/p&gt;
&lt;p&gt;Consider this:
You exist. You have needs. They are obvious to you. You feel hunger and thirst. You desire sex and are at times aroused. When you are too cold you seek warmth and when you are too hot you crave the relief of a dip in cold water.
When you sit for too long you become anxious and are compelled to move your body and when you exert yourself too much your thoughts turn to soft beds and hot food. When you observe a perplexing phenomenon your curiosity
percolates. And when the answers you seek prove elusive and your mental fortitude wains you become frustrated and are compelled to take a break. You don't need to think about what to think. You need not weigh what you should want.
Without effort your needs and desires are clear. Your &lt;strong&gt;work&lt;/strong&gt; is to fulfil &lt;strong&gt;all&lt;/strong&gt; those needs, while at the same time maintaining an emotional equilibrium and sense of worth.&lt;/p&gt;
&lt;p&gt;How often do we stand in our own way in this work? "All the time" say I. And the chief obstruction we place before ourselves is the middleman.&lt;/p&gt;
&lt;p&gt;Suppose you are suddenly in a new place, with no money and no contacts, no society to lean on. You are hungry and tired so you need the basics: Food, shelter, water, warmth.&lt;/p&gt;
&lt;p&gt;What would you do? 
Most people would probably perish, myself included (a sad comment on our present culture).&lt;/p&gt;
&lt;p&gt;But suppose you're of particularly stark constitution and you manage to scrounge together what you need.
How would you have done that? &lt;/p&gt;
&lt;p&gt;Would you wander into the woods with a resume scratched into a piece of bark and ask a squirrel for a job in exchange for acorns to trade for food?
Probably not. Who even would you trade the acorns to? Society, money, commerce and trade, all these are meaningless in this new place&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probably&lt;/strong&gt; you would set about building a fire, assuming you know how to start one with friction.
Then you might build a simple shelter from the materials around you, something sufficient to keep the elements off you while you sleep and reflect heat from your fire.
Then if you're not already too tired you may begin looking for food. Gathering it from plants around you or taking it from the lives of animals you can catch and kill.
Concurrently with your search for food you may locate some water to keep you hydrated&lt;/p&gt;
&lt;p&gt;This would be a brutal existence on your own, but were you to meet another like you, (lost, alone, but cooperative). The two of you could work together and delegate the work and share the rewards.
Up to a point adding more companions would only improve the quality of life for each of you supposing you each understand what the others are doing and how those things relate back to the survival of your group.
Congratulations you and your new friends have re-created what many consider to be the way humanity existed for the bulk of our history (the tens of thousands of years before agriculture).&lt;/p&gt;
&lt;p&gt;Given enough time you and your friends and your offspring and their offspring, and so on and so forth might become large enough that any one member of your group doesn't necessarily know every other member of the group.
They may be walking around this place you've established yourself and meet another and not know their name, or their face or have any no idea what they do.
Suppose now that &lt;em&gt;you&lt;/em&gt; are the one meeting this new person who you know to be in your group but who you don't know.
This might feel very strange for you but probably not because in our real world this is the situation in just about every interaction we have with people.
Now if this new person doesn't say anything to you and they don't have anything you want or need you can safely ignore them, and they you if the reverse holds true that you don't have anything they want or need.
But suppose you're building a house and this new member is carrying a bunch of wood perfect for house building. What might you do?
You might say to the fellow,&lt;/p&gt;
&lt;p&gt;"How have you gotten all that nice wood? Where can I get some?"&lt;/p&gt;
&lt;p&gt;And if he's a kind fellow he may tell you.&lt;/p&gt;
&lt;p&gt;"I got this wood from that clump of trees over there. They're good trees for wood."&lt;/p&gt;
&lt;p&gt;And you may desire this wood and so thank the fellow and go off and collect some for yourself.&lt;/p&gt;
&lt;p&gt;But suppose instead this fellow says.&lt;/p&gt;
&lt;p&gt;"I got this wood from that clump of trees over there. I'll sell you some of this wood if you like"&lt;/p&gt;
&lt;p&gt;What in the world has this man just said?&lt;/p&gt;
&lt;p&gt;What he's done is he's just offered to be a middleman. He'll give you some wood and save you the work of cutting trees if you give him something that he values the same.
He's just invented commerce.
So you might take him up on that offer, thinking to yourself "Well I have plenty of extra rocks I've collected so I'll offer him some rocks for his wood and save myself some time and labor"&lt;/p&gt;
&lt;p&gt;But the fellow doesn't want any rocks. He wants meat.
You don't have any meat but you know a good hunting ground where you could kill a deer and get some meat for the fellow in exchange for the wood.
The trouble is that hunting the deer will be just as much work if not more work as just going and cutting some wood from the same clump of trees as the fellow with the wood.
So instead you choose to go do it yourself.&lt;/p&gt;
&lt;p&gt;Ah but the troubles aren't over for you. As you bid the fellow farewell and say "Thanks for the offer but I'll just go chop some wood for myself".
He stops you and says&lt;/p&gt;
&lt;p&gt;"You can't go chop that wood yourself. Those are &lt;strong&gt;my&lt;/strong&gt; trees and only I can chop them."&lt;/p&gt;
&lt;p&gt;What the hell? What does he mean they're his trees? Isn't everyone just a lost soul trying to make it in this strange new place and nothing here belongs to anyone but rather is just there just you are all just there?&lt;/p&gt;
&lt;p&gt;"No" says the fellow, "Everyone in the group agreed before you came along that those trees are mine and no one can cut them but me."&lt;/p&gt;
&lt;p&gt;So now what can you do? Must you go and hunt some meat to get the wood you need for your house? In this case you must, and so you're off on a circuitous quest to obtain wood, by first hunting some meat.&lt;/p&gt;
&lt;p&gt;So you go to the hunting grounds you know about with your bow and set down in some brush to await a deer. When you do this another fellow, different from the last who you don't know comes along and greets you.&lt;/p&gt;
&lt;p&gt;"How are you?" says the fellow.&lt;/p&gt;
&lt;p&gt;"Well" you say. "I'm hunting some deer to trade the meat for wood to build myself a house."&lt;/p&gt;
&lt;p&gt;"Ah" says the fellow. "You cannot hunt the deer in these woods I'm afraid. All these deer and even these woods belong to me, only I can hunt the deer here and cut the trees. But if you give me some grasses to make for myself
a thatching I'll give you the meat you need."&lt;/p&gt;
&lt;p&gt;Son of a ... You can't even hunt in this good spot for hunting because some other fellow owns the deer there.&lt;/p&gt;
&lt;p&gt;So you go off in search of grass to trade for meat to in turn trade for wood with which you can build yourself a house.&lt;/p&gt;
&lt;p&gt;So you go to where you once noticed a fine field of tall grasses perfect for thatching to collect them to trade to the fellow who owns the deer.
But as you go to cut the grass yet another new fellow who's name and purpose in the group you don't know stops you to ask you for what are you cutting &lt;em&gt;his&lt;/em&gt; grasses.&lt;/p&gt;
&lt;p&gt;"Your grasses? You mean to tell me that you own these grasses like the other fellow owned the deer and the fellow before owned the wood?" you ask incredulously.&lt;/p&gt;
&lt;p&gt;"Aye" says the grass fellow. "All these grasses as far as you see them are mine, and you cannot cut them."&lt;/p&gt;
&lt;p&gt;"But in another pasture I have some yaks that eat the grasses I have there. And they are in need of shaving" says the grass fellow.
"If you come to my other pasture and shave my yaks with that knife you intended to cut grasses with here, I'll give you permission to come back here and cut as much grass as you wish."&lt;/p&gt;
&lt;p&gt;So you agree and follow the fellow to his field of yaks and proceed to shave the man's yaks. After you finish the grass fellow thanks you for your hard work and gives you permission to cut his grasses.
Which you do and you take the grasses to the deer fellow and give them to him. Upon receiving your grasses the deer fellow launches an arrow over your heads and kills a deer and tells you, that you may take your meat from that deer..
So you butcher the deer and pack up all it's meat and bones and make your way to the wood fellow.&lt;/p&gt;
&lt;p&gt;"I have your meat now" you say to the wood fellow.&lt;/p&gt;
&lt;p&gt;He greats you happily and takes the meat you give him, giving you permission to cut wood from his trees in turn.
You cut the wood you need from his trees and carry it back to your camp to begin constructing your house
When you get to your camp the sun is setting and you must wait to build your house tomorrow.
Sitting at your fire contemplating your day you realize that your quest to build a house is incomplete and barely even started although you've put in a huge amount of effort
You've take a very long and indirect path to fulfilling your needs and it makes you feel that things are not fair.
The Grass fellow had to do nothing, he only owned grasses and yaks.
The Deer fellow did nothing he only shot a deer for you.
The Wood fellow did nothing he only owned the trees.
You however had to shave a yak, cut a field of grasses, butcher a deer for meat and cut trees for wood.
You start to think to yourself that if you owned something you could save yourself work by trading it for the things you need like wood, and soon thatching like the deer fellow needed.&lt;/p&gt;
&lt;p&gt;So you go to the group and you ask that you be given something to own. They all agree that since you've collected lots of rocks and you know where to get good rocks that you should own the rocks.
This is good for you. You continue in life owning the rocks and trading them for things you need.
But eventually you grow tired of endlessly trading your rocks to get something else, to get something else to finally get what you need. So you go back to the group.&lt;/p&gt;
&lt;p&gt;"We all own something and it has made it easier for us to get what we need because we can trade what we own for that which we need." you say to the group.&lt;/p&gt;
&lt;p&gt;The group all murmurs in approval of your apt summary of the system in place..&lt;/p&gt;
&lt;p&gt;"But we've all noticed that at times it's hard to find a fellow to take that which you own who also has what you need." You say.
"Often times many trades are needed to get what you need from that which you own and the work is nearly not saved because of the long chain."&lt;/p&gt;
&lt;p&gt;Everyone in the group nods in agreement.&lt;/p&gt;
&lt;p&gt;"So perhaps rather than this business of trading one thing for another for another. We can all just trade what we own for one thing which no one owns.
Then you can make a single trade for the one thing and then trade that for what you need."&lt;/p&gt;
&lt;p&gt;Everyone in the group agrees this is a good idea and you all decide that people should trade what they own for one thing that no one owns to make it easier to trade at all.&lt;/p&gt;
&lt;p&gt;This system works well and you've invented money. Good job!&lt;/p&gt;
&lt;p&gt;Now rather than taking long paths to trade one thing for another for another you just trade for money and then trade your money for what you need. What a great system.&lt;/p&gt;
&lt;p&gt;Suppose some generations pass like this but now once again you are a new member in this group and you don't own anything.
You want to build yourself a house so you go to the woods where the wood fellow stops you from cutting his trees.&lt;/p&gt;
&lt;p&gt;"You need to give me money before you can cut my trees." He says.&lt;/p&gt;
&lt;p&gt;"But where can I get money if I do not own anything?" you ask the wood fellow.&lt;/p&gt;
&lt;p&gt;The wood fellow thinks for a time and then speaks. "You should go to the group and ask that they give you ownership of something that you can trade for money. Then you can trade your money to me for the
wood you need"&lt;/p&gt;
&lt;p&gt;So you go to the group and ask that they give you something to own so you can trade it for money.
But there is a problem. Everything is already owned. No one can give you anything to own with out giving something up themselves.
So the group thinks for a time and decides that although you don't own anything, you still own yourself and you can trade yourself for that which you need in the form of work.
So you go to a fellow that owns much and has traded it for much money, you say to the fellow.&lt;/p&gt;
&lt;p&gt;"Have you any work that I might trade to you for money?"&lt;/p&gt;
&lt;p&gt;And the fellow thinks for a time and realizes that he has the money and the resources to never work again. So he sets you to work, cutting his wood, and mowing his grasses, butchering his deer and shaving his yaks.
You do all the fellows work and give to him that which he owns for him to trade. Work he in turns sets you to.
In return he gives you some of the money you've gotten for trading that which he owns.
This money you can trade back to the fellow or other fellows who own things like him for that which you need to do your own work.&lt;/p&gt;
&lt;p&gt;Finally, once you've done your fellow's work, traded your fellow's goods, gotten a portion of your fellow's money, traded it for some good's of your own. Now you can do your work to fulfil your needs.&lt;/p&gt;
&lt;p&gt;Now you can be happy if you have the time.&lt;/p&gt;
&lt;p&gt;You can see where I'm going with this. Money is the middleman. Ownership is the middleman. These road block to nature. They're middlemen. They're antithetical to humanity.&lt;/p&gt;
&lt;p&gt;These middlemen exist everywhere. Commerce is the low handing analogy.&lt;/p&gt;
&lt;p&gt;Look at food and poop.&lt;/p&gt;
&lt;p&gt;You might be thinking to yourself. But I don't have any impediments to pooping. When I feel the call I go sit on the toilet and ba-da-bing ba-da-boom poop complete and problem solved.
Well you're wrong.&lt;/p&gt;
&lt;p&gt;What really happens is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You feel the need to poop (and probably pee too)&lt;/li&gt;
&lt;li&gt;You go sit on the toilet and poop and pee into fresh water.&lt;/li&gt;
&lt;li&gt;You flush the poop and pee and water into a) a septic tank. b) a sewer&lt;/li&gt;
&lt;li&gt;Energy is expended:
  a) the poop and pee and water sit in the septic tank and slowly decompose though never fully, and eventually the waste is pumped into a truck and driven to a water treatment facility
  b) the poop and pee and water run into the sewer which carries it via pipes and pumps to a water treatment facility&lt;/li&gt;
&lt;li&gt;More energy is expended: At the faciliy heaters, pumps, chemicals, lots of infrastructure and a large group of workers all coordinate to clean the water that was dirtied in step 2. Separating the poop and pee from it.&lt;/li&gt;
&lt;li&gt;The poop and pee is finally "processed" best case scenario: the solid waste taken from the water is composed commercially and sent to the dump because it has too many chemicals from step 5 to be of use as fertilizer. worst case
scenario: the solid waste is sent directly to the dump to be buried and finally decompose slowly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this system steps 2 - 6 are all middlemen. An alternative exists.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You feel the need to poop&lt;/li&gt;
&lt;li&gt;You do your business into a container containing a carbonaceous organic filler material to absorb liquids and mask smell.&lt;/li&gt;
&lt;li&gt;When your container become full you empty it into a pile containing other organic materials in an appropriate ratio of carbonaceous to nitrogenous organic materials, covering the pile with more carbonaceous organic filler (for smell)&lt;/li&gt;
&lt;li&gt;In 2 years the waste is turned into fertile compost that can be spread on gardens, pastures, orchards and flower beds.&lt;/li&gt;
&lt;li&gt;The food grown with the compost is eaten by you to become poop and pee once more.&lt;/li&gt;
&lt;li&gt;No energy was wasted on things like transporting the poop or heating it or "purifying it"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Much better right? You can read the &lt;strong&gt;Humanure Handbook&lt;/strong&gt; by Joe Jenkins if you think that's cool. He'll tell you all about it.&lt;/p&gt;
&lt;p&gt;The society we live in has placed these middlemen everywhere for use to be hamstrung by. For most of us, we're so accustomed to dealing with them we don't even know you can get around them, or worse don't notice them at all.
But usually can.
Need something but don't have money? Try and forage it.
Can't forage it? Barter for it?
Can't barter? Then unfortunately you're screwed and you must interact with the money-middleman
If that upsets you then be cognizant of the freedoms you give up that force you to deal with more middlemen.&lt;/p&gt;
&lt;p&gt;I can go on for days listing middlemen.
What organic, humanely raised meat?
Go to a local farmer.
But wait he can't sell it to you because in order to use money (a middleman in it's own right),
he has to go through the USDA (a big fat middleman).
So don't mess around just trade the farmer for some meat. Or better yet, trade him for a calf or a kid or a lamb or a box of chicks and raise your own meat.&lt;/p&gt;
&lt;p&gt;As humans we know what we need intrinsically. We just waste a lot of time and energy and happiness searching for the middleman who will give it to us.
Life is out there, you just have to take the shortest path there.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Something Everyday</title><link>https://owenstranathan.com/2022/01/31/something-everyday.html</link><description>&lt;p&gt;Today is January 31. Nothing special for a lot of us, but for more than 1.4 billion people today is a special occasion.
Today is the last day of the year according to the lunar calendar. So that makes today Lunar New Year's Eve.  While
there are many cultures that celebrate this holiday of specific importance to me is the Chinese tradition because my
wife is from Mainland China.  Today we will celebrate by making lots of food and watching a Chinese program a lot like
the American New Year's Eve ball drop program only there's no ball and the performers are a lot more varied and talented
(the American program has gotten pretty lame these last few years with a dearth of variety in the quality and types of
performances on display).&lt;/p&gt;
&lt;p&gt;Beyond the cultural significance of today, it's also a day that is uniquely special to me. Today is my 31st day of
running everyday and eating only meat. I started these little challenges for myself on the 1st of the year for 2 reasons
that reflect the 2 separate challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Over the holidays I let my health and fitness routines slip, in particular my diet had gotten pretty carb heavy and
   I'd taken to drinking quite a lot.&lt;/li&gt;
&lt;li&gt;My father mentioned very casually that he thought it would be cool to run at least 1 mile a day for a whole year.
   And in an effort to encourage him I challenged him to run everyday with me for a month. He didn't do it but I made a
   declaration of intention and so was honor bound to continue.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So to tackle the first I decided to "reset" my diet and eating habits with the ultimate elimination/cleanse diet. Since
I first started focusing at all on my health I've particularly enjoyed experimenting with diet and observing how what
and when you eat affects every aspect of your heath.  The month of carnivore was not especially illuminating but I'd
like to discuss it in details and so I will be writing another post about it soon.&lt;/p&gt;
&lt;p&gt;As for the second challenge of running everyday I thought merely that it would compliment the first challenge well and
maybe help me loose an extra pound or so. However to my surprise it has turned out to be the more valuable challenge to
me.&lt;/p&gt;
&lt;p&gt;The criteria for the challenge was very simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run at least once everyday.&lt;/li&gt;
&lt;li&gt;Every run must be at least 1 mile in length to count.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It has been a pretty cold January here in Vermont and at the start of the challenge I was lazy and didn't do my runs
outside or in the mornings. The first week or so I would consistently find myself at the end of the day having not done
my run yet and having to get changed and go hit the treadmill (I &lt;strong&gt;hate&lt;/strong&gt; running on a treadmill) even though I was
tired and not in to it. This was a lesson to me. Don't be lazy. Get up and run in the morning it said to me.
So I did. Even when it's cold I would get up and run in the morning. Let me tell you something. It sucks.
I &lt;strong&gt;never&lt;/strong&gt; want to go out into the subzero world first thing in the morning. But if I don't the punishment is a late
night run on a treadmill after I'm tired from the day. And that's much worse.&lt;/p&gt;
&lt;p&gt;But it's not all bad. That morning run gives me something important, several important things actually:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A sense of accomplishment&lt;/strong&gt; - No matter what happens each day at least I did that one hard thing and I can feel
   maybe not good because that's a lot to feel, but at least confident that I'm working hard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Morning sun light and fresh air&lt;/strong&gt; - this one sounds a bit like new age health advise but I really feel a positive
   difference if I get up and get outside first thing in the morning (well almost first thing... after coffee).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A jolt to the metabolism&lt;/strong&gt; - doing some aerobic activity before breakfast gets your fire burning and helps jump
   start your metabolism.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Starting the day out right&lt;/strong&gt; - beyond a feeling of accomplishment starting your day with a run is beneficial
   because, if it's the hardest thing you'll do that day it makes all the other little difficult decisions (muffin or
banana? Another cup of coffee or some herbal tea? Do the laundry or make an excuse?) seem a lot easier and easier to
make the right decision.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are probably more benefits but I'm not gonna turn this post into a list of them.&lt;/p&gt;
&lt;p&gt;What I really want to focus on is this idea of "Doing &lt;strong&gt;something&lt;/strong&gt; everyday" meaning, find one thing and make it
non-negotiable. For a lot of us we already have one non-negotiable thing we must do everyday and it is our job. But your
job isn't for &lt;strong&gt;you&lt;/strong&gt; in as much as your job is for &lt;strong&gt;money&lt;/strong&gt; which is for food/shelter/clothing/energy which are for
you. Your job is a bit of commerce you're engaged in, a trade of your time for some money, and (for most people) does
nothing to enrich your experience of life.  Moreover I don't have a very high opinion about money. Money is just for
spending and only as much as is necessary. Money doesn't intrinsically have value.&lt;/p&gt;
&lt;p&gt;Instead you must find something you really want to be doing. You may not have time to do it properly. That doesn't
matter. Just find some part of this thing that you can do everyday. Want to paint a landscape but cannot possible do one
everyday. That's fine, make your &lt;strong&gt;one thing&lt;/strong&gt; that you must make 2 new brush strokes on the canvas everyday. It might
take a while but you'll have a painting eventually.
Want to build a house? Make your &lt;strong&gt;one thing&lt;/strong&gt; that you must work in some capacity on that house everyday, meaning show
up and do something at the site where the house will be, not sitting at a desk thinking about house building or drawing
pictures of houses you'd like to build. Want to write a piece of music? One note a day. Software? One "line-of-code" a
day". Walk to China? Well other than the oceans which you'll need a boat for, you can walk just one mile a day (though
you might have to take some time off everything else for that).&lt;/p&gt;
&lt;p&gt;It can be anything but when you find a &lt;strong&gt;one non-negotiable thing&lt;/strong&gt; you get the 2 most important benefits I listed above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Accomplishment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Starting the day out right&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After a while of having the discipline to do the &lt;em&gt;one&lt;/em&gt; thing you might feel confident to add 2 things, then 3, then 4.
Before you know it your whole day will consist of you doing just the things that are important enough to you that they
are non-negotiable. You might even be able to stop selling yourself for money and instead sell your work for what you
need or money to buy what you need (or maybe the things you find important provide what you need all on their own and
you can live a life without money, that's the dream).&lt;/p&gt;
&lt;p&gt;This past month my "&lt;em&gt;one thing&lt;/em&gt;" has been running at least a mile. And I made it non-negotiable. Even when I felt like
my legs couldn't take another day of running, I had to do it, and I'm sure glad I did. More over even when I thought I
couldn't do it in actuality I could.  After 31 days I think I could keep this streak up indefinitely. But I won't.
Instead I'm going to alter and add to it.  Starting tomorrow I'm going to pick a new one thing and change my first one
thing from running to walking.&lt;/p&gt;
&lt;p&gt;I like running but it's not really my focus. I did the run everyday for a month more to encourage my Dad and to show him
that if I can do it then so can he. So starting tomorrow I'll be doing a strength workout every single day for an
indefinite time. I'll also be changing my morning runs to morning walks for 2 simple reasons:
1. It's much easier for me to walk in all sorts of weather (the primary environmental constraint in Northern Vermont)
   and thus easier to maintain my practice of being outside in the early morning.
2. Walking is much more compatible with my over arching health/fitness goal of 7% body fat than running. &lt;em&gt;(more on that
   later)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In addition I'll also be getting off carnivore this afternoon when I sit down to eat dumplings with my wife for Chinese
New Year. Jumping right back in to starchy grain derived carbs is a terrible idea and I know I'll regret it but this
holiday is important to her and I don't want to be a party pooper. After today I'll be back to a clean diet of just
meat, fruit, vegetables, tree nuts, dairy, and natural sugars such as maple and honey.  I know I can live happily on
just meat, so now I'll start adding in what I want to eat. I don't really want to eat grains, they never make me feel
good and always just make me feel weighted down and almost stunted while my body works to digest them. I miss fruit and
vegetable quite a lot so I'll add those back. Dairy has been valuable to me while on carnivore and so I'll continue
eating it as a staple in my diet. Tree nuts I enjoy as a snack and a treat and treats are a useful dietary
tools. Honey and maple sugar are likewise are treats to be used strategically. This is just what works best for
me right now and is in no way a hard dietary recommendation to anyone.&lt;/p&gt;
&lt;p&gt;My health and fitness is very important to me, but it's the easiest aspect of my life to blow off because "more
important" things take precedence. Things like building the house you mean to live in certainly are important. But
nothing is so important as your health.&lt;/p&gt;
&lt;p&gt;Find what is important to you, start with just one thing and make it non-negotiable.&lt;/p&gt;</description><author>owen@wabisoft.io (Owen Stranathan)</author><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate></item></channel></rss>